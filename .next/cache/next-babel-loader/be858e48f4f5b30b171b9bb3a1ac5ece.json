{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\n\nconst PollResults = props => __jsx(\"div\", {\n  className: \"poll-results\"\n}, __jsx(\"h5\", null, __jsx(FontAwesomeIcon, {\n  icon: faChartBar\n}), \" Results\"), props.resultsLoading ? __jsx(\"div\", {\n  className: \"justify-content-center align-items-center\",\n  style: {\n    height: '200px',\n    display: 'flex'\n  }\n}, __jsx(Spinner, {\n  animation: \"grow\",\n  variant: \"light\"\n})) : __jsx(\"div\", null, __jsx(\"div\", {\n  className: \"poll-stat mb-3\"\n}, __jsx(\"b\", null, props.totalVotes, \" votes\"), \" \\u2022 \", __jsx(\"b\", null, props.timelimit)), __jsx(\"div\", {\n  className: \"mb-3\"\n}, __jsx(Button, {\n  variant: \"grey-blue\",\n  size: \"sm\",\n  onClick: props.loadResults\n}, props.refreshResultsLoading ? __jsx(Spinner, {\n  as: \"span\",\n  animation: \"grow\",\n  size: \"sm\",\n  role: \"status\",\n  \"aria-hidden\": \"true\"\n}) : null, \"Refresh Results\")), __jsx(\"div\", {\n  className: \"results-container\"\n}, props.results.map((result, i) => __jsx(\"div\", {\n  key: i\n}, __jsx(\"h6\", null, props.choices[i]), __jsx(\"div\", {\n  className: \"poll-result\"\n}, __jsx(\"div\", {\n  className: \"result-bar mb-3\",\n  style: {\n    width: `${Math.round(result / props.totalVotes * 100)}%`\n  }\n}, __jsx(\"div\", null, result !== 0 ? `${result} votes • ${Math.round(result / props.totalVotes * 100).toFixed(2)}%` : '0 votes • 0.00%'))))))));\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n};\nexport default PollResults;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/components/PollResults.js"],"names":["FontAwesomeIcon","faChartBar","Spinner","Button","PropTypes","PollResults","props","resultsLoading","height","display","totalVotes","timelimit","loadResults","refreshResultsLoading","results","map","result","i","choices","width","Math","round","toFixed","propTypes","func"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IACvB;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,kBAAI,MAAC,eAAD;AAAiB,EAAA,IAAI,EAAEL;AAAvB,EAAJ,aADF,EAEIK,KAAK,CAACC,cAAN,GACA;AAAK,EAAA,SAAS,EAAC,2CAAf;AAA2D,EAAA,KAAK,EAAE;AAACC,IAAAA,MAAM,EAAE,OAAT;AAAkBC,IAAAA,OAAO,EAAE;AAA3B;AAAlE,GACE,MAAC,OAAD;AAAS,EAAA,SAAS,EAAC,MAAnB;AAA0B,EAAA,OAAO,EAAC;AAAlC,EADF,CADA,GAKA,mBACE;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,iBAAIH,KAAK,CAACI,UAAV,WADF,cACoC,iBAAIJ,KAAK,CAACK,SAAV,CADpC,CADF,EAIE;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,MAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,IAAI,EAAC,IAAjC;AAAsC,EAAA,OAAO,EAAEL,KAAK,CAACM;AAArD,GACIN,KAAK,CAACO,qBAAN,GACA,MAAC,OAAD;AACA,EAAA,EAAE,EAAC,MADH;AAEA,EAAA,SAAS,EAAC,MAFV;AAGA,EAAA,IAAI,EAAC,IAHL;AAIA,EAAA,IAAI,EAAC,QAJL;AAKA,iBAAY;AALZ,EADA,GAOK,IART,oBADF,CAJF,EAkBE;AAAK,EAAA,SAAS,EAAC;AAAf,GACGP,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkB,CAACC,MAAD,EAASC,CAAT,KACjB;AAAK,EAAA,GAAG,EAAEA;AAAV,GACE,kBAAKX,KAAK,CAACY,OAAN,CAAcD,CAAd,CAAL,CADF,EAEE;AAAK,EAAA,SAAS,EAAC;AAAf,GACE;AACE,EAAA,SAAS,EAAC,iBADZ;AAEE,EAAA,KAAK,EAAE;AAACE,IAAAA,KAAK,EAAG,GAAEC,IAAI,CAACC,KAAL,CAAYL,MAAM,GAACV,KAAK,CAACI,UAAd,GAA4B,GAAvC,CAA4C;AAAvD;AAFT,GAIE,mBACGM,MAAM,KAAK,CAAX,GACE,GAAEA,MAAO,YAAWI,IAAI,CAACC,KAAL,CAAYL,MAAM,GAACV,KAAK,CAACI,UAAd,GAA4B,GAAvC,EAA4CY,OAA5C,CAAoD,CAApD,CAAuD,GAD7E,GAGC,iBAJJ,CAJF,CADF,CAFF,CADD,CADH,CAlBF,CAPJ,CADF;;AAoDAjB,WAAW,CAACkB,SAAZ,GAAwB;AACtBX,EAAAA,WAAW,EAAER,SAAS,CAACoB;AADD,CAAxB;AAIA,eAAenB,WAAf","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\n\nconst PollResults = props => (\n  <div className='poll-results'>\n    <h5><FontAwesomeIcon icon={faChartBar}/> Results</h5>\n    { props.resultsLoading ?\n      <div className='justify-content-center align-items-center' style={{height: '200px', display: 'flex'}}>\n        <Spinner animation=\"grow\" variant=\"light\" />\n      </div>\n      :\n      <div>\n        <div className='poll-stat mb-3'>\n          <b>{props.totalVotes} votes</b> • <b>{props.timelimit}</b>\n        </div>\n        <div className='mb-3'>\n          <Button variant='grey-blue' size='sm' onClick={props.loadResults}>\n            { props.refreshResultsLoading ? \n              <Spinner\n              as=\"span\"\n              animation=\"grow\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              /> : null\n            }\n             Refresh Results\n          </Button>\n        </div>\n        <div className='results-container'>\n          {props.results.map((result, i) => (\n            <div key={i}>\n              <h6>{props.choices[i]}</h6>\n              <div className='poll-result'>\n                <div \n                  className='result-bar mb-3'\n                  style={{width: `${Math.round((result/props.totalVotes) * 100)}%`}}\n                >\n                  <div>\n                    {result !== 0 ?\n                      `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                      :\n                      '0 votes • 0.00%'\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    }\n  </div>\n);\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n}\n\nexport default PollResults;"]},"metadata":{},"sourceType":"module"}