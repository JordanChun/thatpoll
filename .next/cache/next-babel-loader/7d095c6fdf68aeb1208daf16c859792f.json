{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router';\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nvar PollPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PollPage, _React$Component);\n\n  _createClass(PollPage, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(_ref) {\n        var slug, req, _absoluteUrl, origin, res, errorCode, data, url;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                slug = _ref.query.slug, req = _ref.req;\n                _absoluteUrl = absoluteUrl(req), origin = _absoluteUrl.origin;\n                _context.next = 4;\n                return fetch(\"\".concat(origin, \"/api/poll/\").concat(slug), {\n                  method: 'POST',\n                  headers: {\n                    'X-Origin': 'statmix'\n                  }\n                });\n\n              case 4:\n                res = _context.sent;\n                errorCode = res.status > 200 ? res.status : false;\n                _context.next = 8;\n                return res.json();\n\n              case 8:\n                data = _context.sent;\n                url = \"\".concat(origin, \"/poll/\").concat(slug);\n                return _context.abrupt(\"return\", {\n                  errorCode: errorCode,\n                  poll: data.pollData,\n                  user: data.userData,\n                  url: url\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function PollPage(props) {\n    var _this;\n\n    _classCallCheck(this, PollPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollPage).call(this, props));\n    _this.state = {\n      totalVotes: _this.props.poll.totalVotes,\n      results: _this.props.poll.results,\n      userDidVote: _this.props.user.didVote,\n      revealResults: !_this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false\n    };\n    _this.updateChoiceSelected = _this.updateChoiceSelected.bind(_assertThisInitialized(_this));\n    _this.loadResults = _this.loadResults.bind(_assertThisInitialized(_this));\n    _this.submitVote = _this.submitVote.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PollPage, [{\n    key: \"updateChoiceSelected\",\n    value: function updateChoiceSelected(e) {\n      this.setState({\n        selectedVote: e.target.value\n      });\n    }\n  }, {\n    key: \"loadResults\",\n    value: function () {\n      var _loadResults = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e, req) {\n        var _absoluteUrl2, origin, slug, res, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _absoluteUrl2 = absoluteUrl(req), origin = _absoluteUrl2.origin;\n                slug = this.props.router.query.slug;\n\n                if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n                  this.setState({\n                    refreshResultsLoading: true,\n                    revealResults: true\n                  });\n                } else {\n                  this.setState({\n                    revealResults: true,\n                    resultsLoading: true\n                  });\n                }\n\n                _context2.prev = 3;\n                _context2.next = 6;\n                return fetch(\"\".concat(origin, \"/api/poll/results/\").concat(slug), {\n                  method: 'GET',\n                  headers: {\n                    'X-Origin': 'statmix'\n                  }\n                });\n\n              case 6:\n                res = _context2.sent;\n                _context2.next = 9;\n                return res.json();\n\n              case 9:\n                data = _context2.sent;\n                this.setState({\n                  totalVotes: data.totalVotes,\n                  userDidVote: data.userDidVote,\n                  results: data.results,\n                  resultsLoading: false,\n                  refreshResultsLoading: false\n                });\n                _context2.next = 15;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 13]]);\n      }));\n\n      function loadResults(_x2, _x3) {\n        return _loadResults.apply(this, arguments);\n      }\n\n      return loadResults;\n    }()\n  }, {\n    key: \"submitVote\",\n    value: function () {\n      var _submitVote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(e, req) {\n        var _absoluteUrl3, origin, slug, res, data, voteHistory, _voteHistory;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault();\n\n                if (!(this.state.selectedVote !== null)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _absoluteUrl3 = absoluteUrl(req), origin = _absoluteUrl3.origin;\n                slug = this.props.router.query.slug;\n                _context3.prev = 4;\n                _context3.next = 7;\n                return fetch(\"\".concat(origin, \"/api/poll/vote/\").concat(slug), {\n                  method: 'POST',\n                  headers: {\n                    'Accept': 'accplication/json',\n                    'Content-Type': 'application/json',\n                    'X-Origin': 'statmix'\n                  },\n                  body: _JSON$stringify({\n                    selectedVote: this.state.selectedVote\n                  })\n                });\n\n              case 7:\n                res = _context3.sent;\n                _context3.next = 10;\n                return res.json();\n\n              case 10:\n                data = _context3.sent;\n\n                //console.log(data);\n                if (data.message === 'error') {\n                  this.setState({\n                    userDidVoteError: true\n                  }); //console.log('already voted');\n                } else {\n                  if (localStorage.voteHistory) {\n                    voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n                    voteHistory.unshift({\n                      title: this.props.poll.title,\n                      url: this.props.router.query.slug\n                    });\n                    voteHistory = _JSON$stringify(voteHistory);\n                    localStorage.setItem('voteHistory', voteHistory);\n                  } else {\n                    _voteHistory = [];\n\n                    _voteHistory.unshift({\n                      title: this.props.poll.title,\n                      url: this.props.router.query.slug\n                    });\n\n                    _voteHistory = _JSON$stringify(_voteHistory);\n                    localStorage.setItem('voteHistory', _voteHistory);\n                  }\n\n                  this.setState({\n                    totalVotes: data.resultsData.totalVotes,\n                    userDidVote: data.resultsData.userDidVote,\n                    selectedVote: data.resultsData.selectedVote,\n                    userDidVoteError: false\n                  });\n                  this.loadResults(e, req);\n                }\n\n                _context3.next = 17;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](4);\n                console.log(_context3.t0);\n\n              case 17:\n                _context3.next = 19;\n                break;\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 14]]);\n      }));\n\n      function submitVote(_x4, _x5) {\n        return _submitVote.apply(this, arguments);\n      }\n\n      return submitVote;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if not data found for poll\n      if (this.props.errorCode) {\n        return __jsx(ErrorPage, {\n          errorCode: this.props.errorCode\n        });\n      }\n\n      var url = this.props.url;\n      var _this$props$poll = this.props.poll,\n          title = _this$props$poll.title,\n          desc = _this$props$poll.desc,\n          visibility = _this$props$poll.visibility,\n          active = _this$props$poll.active,\n          choices = _this$props$poll.choices,\n          dateCreated = _this$props$poll.dateCreated,\n          visits = _this$props$poll.visits,\n          timelimit = _this$props$poll.timelimit,\n          category = _this$props$poll.category;\n      var _this$state = this.state,\n          totalVotes = _this$state.totalVotes,\n          results = _this$state.results,\n          userDidVote = _this$state.userDidVote,\n          userDidVoteError = _this$state.userDidVoteError,\n          revealResults = _this$state.revealResults,\n          resultsLoading = _this$state.resultsLoading,\n          refreshResultsLoading = _this$state.refreshResultsLoading;\n      return __jsx(Layout, {\n        pageTitle: \"Poll - \".concat(title),\n        pageDesc: desc,\n        visibility: visibility,\n        path: this.props.router.asPath\n      }, __jsx(\"div\", {\n        className: \"poll-wrapper\"\n      }, visibility === 'private' ? __jsx(\"div\", {\n        className: \"poll-alert\"\n      }, __jsx(Alert, {\n        variant: \"danger\"\n      }, \"This is a \", __jsx(\"b\", null, \"private\"), \" poll. Please consider before sharing the link.\")) : null, __jsx(\"h4\", {\n        className: \"poll-title\"\n      }, title.length > 0 ? title : 'Untitled'), __jsx(\"hr\", null), __jsx(\"div\", {\n        className: \"poll-desc mb-1\"\n      }, __jsx(\"h6\", null, \"Description\"), __jsx(\"div\", null, __jsx(\"p\", null, desc.length > 0 ? desc : __jsx(\"i\", null, \"No description\")), __jsx(\"hr\", null), __jsx(\"div\", {\n        className: \"poll-stat\"\n      }, \"Category: \", category), __jsx(\"div\", {\n        className: \"poll-stat\"\n      }, visits, \" views \\u2022 \", dateCreated))), __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n        className: \"poll-options mb-3\"\n      }, __jsx(ShareButton, {\n        url: url\n      }), __jsx(ReportButton, {\n        urlref: this.props.router.query.slug,\n        title: title\n      })))), __jsx(\"hr\", null), active && !userDidVote ? __jsx(PollChoices, {\n        userDidVote: userDidVote,\n        userDidVoteError: userDidVoteError,\n        timelimit: timelimit,\n        choices: choices,\n        revealResults: revealResults,\n        updateChoiceSelected: this.updateChoiceSelected,\n        submitVote: this.submitVote,\n        loadResults: this.loadResults\n      }) : null, !active || userDidVote || revealResults ? __jsx(PollResults, {\n        totalVotes: totalVotes,\n        results: results,\n        choices: choices,\n        timelimit: timelimit,\n        resultsLoading: resultsLoading,\n        refreshResultsLoading: refreshResultsLoading,\n        loadResults: this.loadResults,\n        active: active\n      }) : null));\n    }\n  }]);\n\n  return PollPage;\n}(React.Component);\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: []\n  },\n  user: {\n    userDidVote: false\n  },\n  revealResults: false,\n  active: true\n};\nexport default withRouter(PollPage);","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/pages/poll.js"],"names":["Layout","fetch","Alert","PollChoices","PollResults","withRouter","ErrorPage","absoluteUrl","InputGroup","FormControl","Button","ShareButton","ReportButton","Row","Col","PollPage","slug","query","req","origin","method","headers","res","errorCode","status","json","data","url","poll","pollData","user","userData","props","state","totalVotes","results","userDidVote","didVote","revealResults","active","resultsLoading","refreshResultsLoading","selectedVote","userDidVoteError","updateChoiceSelected","bind","loadResults","submitVote","e","setState","target","value","router","preventDefault","body","message","localStorage","voteHistory","JSON","parse","getItem","unshift","title","setItem","resultsData","console","log","desc","visibility","choices","dateCreated","visits","timelimit","category","asPath","length","React","Component","defaultProps"],"mappings":";;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;;IAEMC,Q;;;;;;;;;;;;;;;;;AACoCC,gBAAAA,I,QAATC,K,CAASD,I,EAAQE,G,QAAAA,G;+BAC3BX,WAAW,CAACW,GAAD,C,EAAtBC,M,gBAAAA,M;;uBACUlB,KAAK,WAAIkB,MAAJ,uBAAuBH,IAAvB,GAA+B;AACpDI,kBAAAA,MAAM,EAAE,MAD4C;AAEpDC,kBAAAA,OAAO,EAAE;AAAE,gCAAY;AAAd;AAF2C,iBAA/B,C;;;AAAjBC,gBAAAA,G;AAIAC,gBAAAA,S,GAAYD,GAAG,CAACE,MAAJ,GAAa,GAAb,GAAmBF,GAAG,CAACE,MAAvB,GAAgC,K;;uBAC/BF,GAAG,CAACG,IAAJ,E;;;AAAbC,gBAAAA,I;AACAC,gBAAAA,G,aAASR,M,mBAAeH,I;iDACvB;AAAEO,kBAAAA,SAAS,EAATA,SAAF;AAAaK,kBAAAA,IAAI,EAAEF,IAAI,CAACG,QAAxB;AAAkCC,kBAAAA,IAAI,EAAEJ,IAAI,CAACK,QAA7C;AAAuDJ,kBAAAA,GAAG,EAAEA;AAA5D,iB;;;;;;;;;;;;;;;;;;AAGT,oBAAYK,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,MAAKF,KAAL,CAAWJ,IAAX,CAAgBM,UADjB;AAEXC,MAAAA,OAAO,EAAE,MAAKH,KAAL,CAAWJ,IAAX,CAAgBO,OAFd;AAGXC,MAAAA,WAAW,EAAE,MAAKJ,KAAL,CAAWF,IAAX,CAAgBO,OAHlB;AAIXC,MAAAA,aAAa,EAAE,CAAC,MAAKN,KAAL,CAAWJ,IAAX,CAAgBW,MAJrB;AAKXC,MAAAA,cAAc,EAAE,KALL;AAMXC,MAAAA,qBAAqB,EAAE,KANZ;AAOXC,MAAAA,YAAY,EAAE,IAPH;AAQXC,MAAAA,gBAAgB,EAAE;AARP,KAAb;AAWA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,+BAA5B;AACA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBD,IAAjB,+BAAnB;AACA,UAAKE,UAAL,GAAkB,MAAKA,UAAL,CAAgBF,IAAhB,+BAAlB;AAhBiB;AAiBlB;;;;yCAEoBG,C,EAAG;AACtB,WAAKC,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAEM,CAAC,CAACE,MAAF,CAASC;AAAzB,OAAd;AACD;;;;;;iDAEiBH,C,EAAG9B,G;;;;;;;gCACAX,WAAW,CAACW,GAAD,C,EAAtBC,M,iBAAAA,M;AACAH,gBAAAA,I,GAAS,KAAKgB,KAAL,CAAWoB,MAAX,CAAkBnC,K,CAA3BD,I;;AAER,oBAAI,KAAKiB,KAAL,CAAWK,aAAX,IAA4B,KAAKL,KAAL,CAAWG,WAAvC,IAAsD,KAAKJ,KAAL,CAAWO,MAArE,EAA6E;AAC3E,uBAAKU,QAAL,CAAc;AAAER,oBAAAA,qBAAqB,EAAE,IAAzB;AAA+BH,oBAAAA,aAAa,EAAE;AAA9C,mBAAd;AACD,iBAFD,MAEO;AACL,uBAAKW,QAAL,CAAc;AAAEX,oBAAAA,aAAa,EAAE,IAAjB;AAAuBE,oBAAAA,cAAc,EAAE;AAAvC,mBAAd;AACD;;;;uBAGmBvC,KAAK,WAAIkB,MAAJ,+BAA+BH,IAA/B,GAAuC;AAC5DI,kBAAAA,MAAM,EAAE,KADoD;AAE5DC,kBAAAA,OAAO,EAAE;AAAE,gCAAY;AAAd;AAFmD,iBAAvC,C;;;AAAjBC,gBAAAA,G;;uBAIaA,GAAG,CAACG,IAAJ,E;;;AAAbC,gBAAAA,I;AAEN,qBAAKuB,QAAL,CAAc;AACZf,kBAAAA,UAAU,EAAER,IAAI,CAACQ,UADL;AAEZE,kBAAAA,WAAW,EAAEV,IAAI,CAACU,WAFN;AAGZD,kBAAAA,OAAO,EAAET,IAAI,CAACS,OAHF;AAIZK,kBAAAA,cAAc,EAAE,KAJJ;AAKZC,kBAAAA,qBAAqB,EAAE;AALX,iBAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;iDAYaO,C,EAAG9B,G;;;;;;;AAClB8B,gBAAAA,CAAC,CAACK,cAAF;;sBACG,KAAKpB,KAAL,CAAWS,YAAX,KAA4B,I;;;;;gCACVnC,WAAW,CAACW,GAAD,C,EAAtBC,M,iBAAAA,M;AACAH,gBAAAA,I,GAAS,KAAKgB,KAAL,CAAWoB,MAAX,CAAkBnC,K,CAA3BD,I;;;uBAEYf,KAAK,WAAIkB,MAAJ,4BAA4BH,IAA5B,GAAoC;AACzDI,kBAAAA,MAAM,EAAE,MADiD;AAEzDC,kBAAAA,OAAO,EAAE;AACP,8BAAU,mBADH;AAEP,oCAAgB,kBAFT;AAGP,gCAAY;AAHL,mBAFgD;AAOzDiC,kBAAAA,IAAI,EAAE,gBAAe;AAACZ,oBAAAA,YAAY,EAAE,KAAKT,KAAL,CAAWS;AAA1B,mBAAf;AAPmD,iBAApC,C;;;AAAjBpB,gBAAAA,G;;uBAUaA,GAAG,CAACG,IAAJ,E;;;AAAbC,gBAAAA,I;;AACN;AAEA,oBAAGA,IAAI,CAAC6B,OAAL,KAAiB,OAApB,EAA6B;AAC3B,uBAAKN,QAAL,CAAc;AAAEN,oBAAAA,gBAAgB,EAAE;AAApB,mBAAd,EAD2B,CAE3B;AACD,iBAHD,MAGO;AACL,sBAAIa,YAAY,CAACC,WAAjB,EAA8B;AACxBA,oBAAAA,WADwB,GACVC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACI,OAAb,CAAqB,aAArB,CAAX,CADU;AAE5BH,oBAAAA,WAAW,CAACI,OAAZ,CAAoB;AAAEC,sBAAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWJ,IAAX,CAAgBkC,KAAzB;AAAgCnC,sBAAAA,GAAG,EAAE,KAAKK,KAAL,CAAWoB,MAAX,CAAkBnC,KAAlB,CAAwBD;AAA7D,qBAApB;AACAyC,oBAAAA,WAAW,GAAG,gBAAeA,WAAf,CAAd;AACAD,oBAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoCN,WAApC;AACD,mBALD,MAKO;AACDA,oBAAAA,YADC,GACa,EADb;;AAELA,oBAAAA,YAAW,CAACI,OAAZ,CAAoB;AAAEC,sBAAAA,KAAK,EAAE,KAAK9B,KAAL,CAAWJ,IAAX,CAAgBkC,KAAzB;AAAgCnC,sBAAAA,GAAG,EAAE,KAAKK,KAAL,CAAWoB,MAAX,CAAkBnC,KAAlB,CAAwBD;AAA7D,qBAApB;;AACAyC,oBAAAA,YAAW,GAAG,gBAAeA,YAAf,CAAd;AACAD,oBAAAA,YAAY,CAACO,OAAb,CAAqB,aAArB,EAAoCN,YAApC;AACD;;AAED,uBAAKR,QAAL,CAAc;AACZf,oBAAAA,UAAU,EAAER,IAAI,CAACsC,WAAL,CAAiB9B,UADjB;AAEZE,oBAAAA,WAAW,EAAEV,IAAI,CAACsC,WAAL,CAAiB5B,WAFlB;AAGZM,oBAAAA,YAAY,EAAEhB,IAAI,CAACsC,WAAL,CAAiBtB,YAHnB;AAIZC,oBAAAA,gBAAgB,EAAE;AAJN,mBAAd;AAMA,uBAAKG,WAAL,CAAiBE,CAAjB,EAAoB9B,GAApB;AACD;;;;;;;;AAGD+C,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;;6BAOG;AACP;AACA,UAAI,KAAKlC,KAAL,CAAWT,SAAf,EAA0B;AACxB,eAAO,MAAC,SAAD;AAAW,UAAA,SAAS,EAAE,KAAKS,KAAL,CAAWT;AAAjC,UAAP;AACD;;AAJM,UAMCI,GAND,GAMS,KAAKK,KANd,CAMCL,GAND;AAAA,6BAkBH,KAAKK,KAAL,CAAWJ,IAlBR;AAAA,UASLkC,KATK,oBASLA,KATK;AAAA,UAULK,IAVK,oBAULA,IAVK;AAAA,UAWLC,UAXK,oBAWLA,UAXK;AAAA,UAYL7B,MAZK,oBAYLA,MAZK;AAAA,UAaL8B,OAbK,oBAaLA,OAbK;AAAA,UAcLC,WAdK,oBAcLA,WAdK;AAAA,UAeLC,MAfK,oBAeLA,MAfK;AAAA,UAgBLC,SAhBK,oBAgBLA,SAhBK;AAAA,UAiBLC,QAjBK,oBAiBLA,QAjBK;AAAA,wBA4BH,KAAKxC,KA5BF;AAAA,UAqBLC,UArBK,eAqBLA,UArBK;AAAA,UAsBLC,OAtBK,eAsBLA,OAtBK;AAAA,UAuBLC,WAvBK,eAuBLA,WAvBK;AAAA,UAwBLO,gBAxBK,eAwBLA,gBAxBK;AAAA,UAyBLL,aAzBK,eAyBLA,aAzBK;AAAA,UA0BLE,cA1BK,eA0BLA,cA1BK;AAAA,UA2BLC,qBA3BK,eA2BLA,qBA3BK;AA8BP,aACE,MAAC,MAAD;AACE,QAAA,SAAS,mBAAYqB,KAAZ,CADX;AAEE,QAAA,QAAQ,EAAEK,IAFZ;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,IAAI,EAAE,KAAKpC,KAAL,CAAWoB,MAAX,CAAkBsB;AAJ1B,SAME;AAAK,QAAA,SAAS,EAAC;AAAf,SACGN,UAAU,KAAK,SAAf,GACC;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,KAAD;AAAO,QAAA,OAAO,EAAC;AAAf,uBACY,2BADZ,oDADF,CADD,GAMC,IAPJ,EAQE;AAAI,QAAA,SAAS,EAAC;AAAd,SAA4BN,KAAK,CAACa,MAAN,GAAe,CAAf,GAAmBb,KAAnB,GAA2B,UAAvD,CARF,EASE,iBATF,EAUE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,gCADF,EAEE,mBACE,iBACGK,IAAI,CAACQ,MAAL,GAAc,CAAd,GAAkBR,IAAlB,GAAyB,kCAD5B,CADF,EAIE,iBAJF,EAKE;AAAK,QAAA,SAAS,EAAC;AAAf,uBACaM,QADb,CALF,EAQE;AAAK,QAAA,SAAS,EAAC;AAAf,SACGF,MADH,oBACoBD,WADpB,CARF,CAFF,CAVF,EAyBE,MAAC,GAAD,QACE,MAAC,GAAD,QACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,WAAD;AAAa,QAAA,GAAG,EAAE3C;AAAlB,QADF,EAEE,MAAC,YAAD;AAAc,QAAA,MAAM,EAAE,KAAKK,KAAL,CAAWoB,MAAX,CAAkBnC,KAAlB,CAAwBD,IAA9C;AAAoD,QAAA,KAAK,EAAE8C;AAA3D,QAFF,CADF,CADF,CAzBF,EAiCE,iBAjCF,EAmCIvB,MAAM,IAAI,CAACH,WAAX,GACF,MAAC,WAAD;AACE,QAAA,WAAW,EAAEA,WADf;AAEE,QAAA,gBAAgB,EAAEO,gBAFpB;AAGE,QAAA,SAAS,EAAE6B,SAHb;AAIE,QAAA,OAAO,EAAEH,OAJX;AAKE,QAAA,aAAa,EAAE/B,aALjB;AAME,QAAA,oBAAoB,EAAE,KAAKM,oBAN7B;AAOE,QAAA,UAAU,EAAE,KAAKG,UAPnB;AAQE,QAAA,WAAW,EAAE,KAAKD;AARpB,QADE,GAUG,IA7CP,EA+CI,CAACP,MAAD,IAAWH,WAAX,IAA0BE,aAA1B,GACA,MAAC,WAAD;AACE,QAAA,UAAU,EAAEJ,UADd;AAEE,QAAA,OAAO,EAAEC,OAFX;AAGE,QAAA,OAAO,EAAEkC,OAHX;AAIE,QAAA,SAAS,EAAEG,SAJb;AAKE,QAAA,cAAc,EAAEhC,cALlB;AAME,QAAA,qBAAqB,EAAEC,qBANzB;AAOE,QAAA,WAAW,EAAE,KAAKK,WAPpB;AAQE,QAAA,MAAM,EAAEP;AARV,QADA,GAWE,IA1DN,CANF,CADF;AAqED;;;;EAxNoBqC,KAAK,CAACC,S;;AA2N7B9D,QAAQ,CAAC+D,YAAT,GAAwB;AACtBlD,EAAAA,IAAI,EAAE;AACJM,IAAAA,UAAU,EAAE,CADR;AAEJC,IAAAA,OAAO,EAAE;AAFL,GADgB;AAKtBL,EAAAA,IAAI,EAAE;AAAEM,IAAAA,WAAW,EAAE;AAAf,GALgB;AAMtBE,EAAAA,aAAa,EAAE,KANO;AAOtBC,EAAAA,MAAM,EAAE;AAPc,CAAxB;AAUA,eAAelC,UAAU,CAACU,QAAD,CAAzB","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router'\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass PollPage extends React.Component {\n  static async getInitialProps({ query: { slug }, req }) {\n    const { origin } = absoluteUrl(req);\n    const res = await fetch(`${origin}/api/poll/${slug}`, {\n      method: 'POST',\n      headers: { 'X-Origin': 'statmix' }\n    });\n    const errorCode = res.status > 200 ? res.status : false\n    const data = await res.json()\n    const url = `${origin}/poll/${slug}`;\n    return { errorCode, poll: data.pollData, user: data.userData, url: url }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      totalVotes: this.props.poll.totalVotes,\n      results: this.props.poll.results,\n      userDidVote: this.props.user.didVote,\n      revealResults: !this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false\n    }\n\n    this.updateChoiceSelected = this.updateChoiceSelected.bind(this);\n    this.loadResults = this.loadResults.bind(this);\n    this.submitVote = this.submitVote.bind(this);\n  }\n\n  updateChoiceSelected(e) {\n    this.setState({ selectedVote: e.target.value });\n  }\n\n  async loadResults(e, req) {\n    const { origin } = absoluteUrl(req);\n    const { slug } = this.props.router.query;\n\n    if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n      this.setState({ refreshResultsLoading: true, revealResults: true });\n    } else {\n      this.setState({ revealResults: true, resultsLoading: true });\n    }\n\n    try {\n      const res = await fetch(`${origin}/api/poll/results/${slug}`, {\n        method: 'GET',\n        headers: { 'X-Origin': 'statmix' }\n      });\n      const data = await res.json();\n\n      this.setState({\n        totalVotes: data.totalVotes,\n        userDidVote: data.userDidVote,\n        results: data.results,\n        resultsLoading: false,\n        refreshResultsLoading: false,\n      });\n    } catch (err) {\n      \n    }\n  }\n\n  async submitVote(e, req) {\n    e.preventDefault();\n    if(this.state.selectedVote !== null) {\n      const { origin } = absoluteUrl(req);\n      const { slug } = this.props.router.query;\n      try {\n        const res = await fetch(`${origin}/api/poll/vote/${slug}`, {\n          method: 'POST',\n          headers: {\n            'Accept': 'accplication/json',\n            'Content-Type': 'application/json',\n            'X-Origin': 'statmix',\n          },\n          body: JSON.stringify({selectedVote: this.state.selectedVote})\n        });\n  \n        const data = await res.json();\n        //console.log(data);\n        \n        if(data.message === 'error') {\n          this.setState({ userDidVoteError: true });\n          //console.log('already voted');\n        } else {\n          if (localStorage.voteHistory) {\n            let voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          } else {\n            let voteHistory = [];\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          }\n\n          this.setState({\n            totalVotes: data.resultsData.totalVotes,\n            userDidVote: data.resultsData.userDidVote,\n            selectedVote: data.resultsData.selectedVote,\n            userDidVoteError: false\n          });\n          this.loadResults(e, req);\n        }\n        \n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      // user didnt select vote\n    }\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return <ErrorPage errorCode={this.props.errorCode} />\n    }\n\n    const { url } = this.props;\n\n    const {\n      title,\n      desc,\n      visibility,\n      active,\n      choices,\n      dateCreated,\n      visits,\n      timelimit,\n      category\n    } = this.props.poll;\n\n    const {\n      totalVotes,\n      results,\n      userDidVote,\n      userDidVoteError,\n      revealResults,\n      resultsLoading,\n      refreshResultsLoading\n    } = this.state;\n\n    return (\n      <Layout\n        pageTitle={`Poll - ${title}`}\n        pageDesc={desc}\n        visibility={visibility}\n        path={this.props.router.asPath}\n      >\n        <div className='poll-wrapper'>\n          {visibility === 'private' ?\n            <div className='poll-alert'>\n              <Alert variant='danger'>\n                This is a <b>private</b> poll. Please consider before sharing the link.\n              </Alert>\n            </div>\n          : null }\n          <h4 className='poll-title'>{title.length > 0 ? title : 'Untitled'}</h4>\n          <hr />\n          <div className='poll-desc mb-1'>\n            <h6>Description</h6>\n            <div>\n              <p>\n                {desc.length > 0 ? desc : <i>No description</i>}\n              </p>\n              <hr />\n              <div className='poll-stat'>\n                Category: {category}\n              </div>\n              <div className='poll-stat'>\n                {visits} views • {dateCreated}\n              </div>\n            </div>\n          </div>\n          <Row>\n            <Col>\n              <div className='poll-options mb-3'>\n                <ShareButton url={url} />\n                <ReportButton urlref={this.props.router.query.slug} title={title} />\n              </div>\n            </Col>\n          </Row>\n          <hr />\n\n          { active && !userDidVote ?\n          <PollChoices\n            userDidVote={userDidVote}\n            userDidVoteError={userDidVoteError}\n            timelimit={timelimit}\n            choices={choices}\n            revealResults={revealResults}\n            updateChoiceSelected={this.updateChoiceSelected}\n            submitVote={this.submitVote}\n            loadResults={this.loadResults}\n          /> : null }\n\n          { !active || userDidVote || revealResults ?\n            <PollResults\n              totalVotes={totalVotes}\n              results={results}\n              choices={choices}\n              timelimit={timelimit}\n              resultsLoading={resultsLoading}\n              refreshResultsLoading={refreshResultsLoading}\n              loadResults={this.loadResults}\n              active={active}\n            />\n            : null }\n        </div>\n      </Layout>\n    )\n  }\n}\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: [],\n  },\n  user: { userDidVote: false },\n  revealResults: false,\n  active: true\n}\n\nexport default withRouter(PollPage)"]},"metadata":{},"sourceType":"module"}