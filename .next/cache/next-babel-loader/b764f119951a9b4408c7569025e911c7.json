{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router';\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass PollPage extends React.Component {\n  static async getInitialProps({\n    query: {\n      slug\n    },\n    req\n  }) {\n    const {\n      origin\n    } = absoluteUrl(req);\n    console.log(req);\n    const clientIp = req.header('x-forwarded-for') || req.connection.remoteAddress;\n    console.log(clientIp);\n    const res = await fetch(`${origin}/api/poll/${slug}`, {\n      method: 'GET',\n      headers: {\n        'X-Origin': 'statmix',\n        'X-IP': clientIp\n      }\n    });\n    const errorCode = res.status > 200 ? res.status : false;\n    const data = await res.json();\n    const url = `${origin}/poll/${slug}`;\n    return {\n      errorCode,\n      poll: data.pollData,\n      user: data.userData,\n      url: url\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalVotes: this.props.poll.totalVotes,\n      results: this.props.poll.results,\n      userDidVote: this.props.user.didVote,\n      revealResults: !this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false\n    };\n    this.updateChoiceSelected = this.updateChoiceSelected.bind(this);\n    this.loadResults = this.loadResults.bind(this);\n    this.submitVote = this.submitVote.bind(this);\n  }\n\n  updateChoiceSelected(e) {\n    this.setState({\n      selectedVote: e.target.value\n    });\n  }\n\n  async loadResults(e, req) {\n    const {\n      origin\n    } = absoluteUrl(req);\n    const {\n      slug\n    } = this.props.router.query;\n\n    if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n      this.setState({\n        refreshResultsLoading: true,\n        revealResults: true\n      });\n    } else {\n      this.setState({\n        revealResults: true,\n        resultsLoading: true\n      });\n    }\n\n    try {\n      const res = await fetch(`${origin}/api/poll/results/${slug}`, {\n        method: 'GET',\n        headers: {\n          'X-Origin': 'statmix'\n        }\n      });\n      const data = await res.json();\n      this.setState({\n        totalVotes: data.totalVotes,\n        userDidVote: data.userDidVote,\n        results: data.results,\n        resultsLoading: false,\n        refreshResultsLoading: false\n      });\n    } catch (err) {}\n  }\n\n  async submitVote(e, req) {\n    e.preventDefault();\n\n    if (this.state.selectedVote !== null) {\n      const {\n        origin\n      } = absoluteUrl(req);\n      const {\n        slug\n      } = this.props.router.query;\n\n      try {\n        const res = await fetch(`${origin}/api/poll/vote/${slug}`, {\n          method: 'POST',\n          headers: {\n            'Accept': 'accplication/json',\n            'Content-Type': 'application/json',\n            'X-Origin': 'statmix'\n          },\n          body: _JSON$stringify({\n            selectedVote: this.state.selectedVote\n          })\n        });\n        const data = await res.json(); //console.log(data);\n\n        if (data.message === 'error') {\n          this.setState({\n            userDidVoteError: true\n          }); //console.log('already voted');\n        } else {\n          if (localStorage.voteHistory) {\n            let voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n            voteHistory.unshift({\n              title: this.props.poll.title,\n              url: this.props.router.query.slug\n            });\n            voteHistory = _JSON$stringify(voteHistory);\n            localStorage.setItem('voteHistory', voteHistory);\n          } else {\n            let voteHistory = [];\n            voteHistory.unshift({\n              title: this.props.poll.title,\n              url: this.props.router.query.slug\n            });\n            voteHistory = _JSON$stringify(voteHistory);\n            localStorage.setItem('voteHistory', voteHistory);\n          }\n\n          this.setState({\n            totalVotes: data.resultsData.totalVotes,\n            userDidVote: data.resultsData.userDidVote,\n            selectedVote: data.resultsData.selectedVote,\n            userDidVoteError: false\n          });\n          this.loadResults(e, req);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    } else {// user didnt select vote\n    }\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return __jsx(ErrorPage, {\n        errorCode: this.props.errorCode\n      });\n    }\n\n    const {\n      url\n    } = this.props;\n    const {\n      title,\n      desc,\n      visibility,\n      active,\n      choices,\n      dateCreated,\n      visits,\n      timelimit,\n      category\n    } = this.props.poll;\n    const {\n      totalVotes,\n      results,\n      userDidVote,\n      userDidVoteError,\n      revealResults,\n      resultsLoading,\n      refreshResultsLoading\n    } = this.state;\n    return __jsx(Layout, {\n      pageTitle: `Poll - ${title}`,\n      pageDesc: desc,\n      visibility: visibility,\n      path: this.props.router.asPath\n    }, __jsx(\"div\", {\n      className: \"poll-wrapper\"\n    }, visibility === 'private' ? __jsx(\"div\", {\n      className: \"poll-alert\"\n    }, __jsx(Alert, {\n      variant: \"danger\"\n    }, \"This is a \", __jsx(\"b\", null, \"private\"), \" poll. Please consider before sharing the link.\")) : null, __jsx(\"h4\", {\n      className: \"poll-title\"\n    }, title.length > 0 ? title : 'Untitled'), __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"poll-desc mb-1\"\n    }, __jsx(\"h6\", null, \"Description\"), __jsx(\"div\", null, __jsx(\"p\", null, desc.length > 0 ? desc : __jsx(\"i\", null, \"No description\")), __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"poll-stat\"\n    }, \"Category: \", category), __jsx(\"div\", {\n      className: \"poll-stat\"\n    }, visits, \" views \\u2022 \", dateCreated))), __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n      className: \"poll-options mb-3\"\n    }, __jsx(ShareButton, {\n      url: url\n    }), __jsx(ReportButton, {\n      urlref: this.props.router.query.slug,\n      title: title\n    })))), __jsx(\"hr\", null), active && !userDidVote ? __jsx(PollChoices, {\n      userDidVote: userDidVote,\n      userDidVoteError: userDidVoteError,\n      timelimit: timelimit,\n      choices: choices,\n      revealResults: revealResults,\n      updateChoiceSelected: this.updateChoiceSelected,\n      submitVote: this.submitVote,\n      loadResults: this.loadResults\n    }) : null, !active || userDidVote || revealResults ? __jsx(PollResults, {\n      totalVotes: totalVotes,\n      results: results,\n      choices: choices,\n      timelimit: timelimit,\n      resultsLoading: resultsLoading,\n      refreshResultsLoading: refreshResultsLoading,\n      loadResults: this.loadResults,\n      active: active\n    }) : null));\n  }\n\n}\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: []\n  },\n  user: {\n    userDidVote: false\n  },\n  revealResults: false,\n  active: true\n};\nexport default withRouter(PollPage);","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/pages/poll.js"],"names":["Layout","fetch","Alert","PollChoices","PollResults","withRouter","ErrorPage","absoluteUrl","InputGroup","FormControl","Button","ShareButton","ReportButton","Row","Col","PollPage","React","Component","getInitialProps","query","slug","req","origin","console","log","clientIp","header","connection","remoteAddress","res","method","headers","errorCode","status","data","json","url","poll","pollData","user","userData","constructor","props","state","totalVotes","results","userDidVote","didVote","revealResults","active","resultsLoading","refreshResultsLoading","selectedVote","userDidVoteError","updateChoiceSelected","bind","loadResults","submitVote","e","setState","target","value","router","err","preventDefault","body","message","localStorage","voteHistory","JSON","parse","getItem","unshift","title","setItem","resultsData","render","desc","visibility","choices","dateCreated","visits","timelimit","category","asPath","length","defaultProps"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router'\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nclass PollPage extends React.Component {\n  static async getInitialProps({ query: { slug }, req }) {\n    const { origin } = absoluteUrl(req);\n    console.log(req);\n    const clientIp = req.header('x-forwarded-for') || req.connection.remoteAddress;\n    console.log(clientIp);\n    const res = await fetch(`${origin}/api/poll/${slug}`, {\n      method: 'GET',\n      headers: { 'X-Origin': 'statmix', 'X-IP': clientIp }\n    });\n    const errorCode = res.status > 200 ? res.status : false\n    const data = await res.json()\n    const url = `${origin}/poll/${slug}`;\n    return { errorCode, poll: data.pollData, user: data.userData, url: url }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      totalVotes: this.props.poll.totalVotes,\n      results: this.props.poll.results,\n      userDidVote: this.props.user.didVote,\n      revealResults: !this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false\n    }\n\n    this.updateChoiceSelected = this.updateChoiceSelected.bind(this);\n    this.loadResults = this.loadResults.bind(this);\n    this.submitVote = this.submitVote.bind(this);\n  }\n\n  updateChoiceSelected(e) {\n    this.setState({ selectedVote: e.target.value });\n  }\n\n  async loadResults(e, req) {\n    const { origin } = absoluteUrl(req);\n    const { slug } = this.props.router.query;\n\n    if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n      this.setState({ refreshResultsLoading: true, revealResults: true });\n    } else {\n      this.setState({ revealResults: true, resultsLoading: true });\n    }\n\n    try {\n      const res = await fetch(`${origin}/api/poll/results/${slug}`, {\n        method: 'GET',\n        headers: { 'X-Origin': 'statmix' }\n      });\n      const data = await res.json();\n\n      this.setState({\n        totalVotes: data.totalVotes,\n        userDidVote: data.userDidVote,\n        results: data.results,\n        resultsLoading: false,\n        refreshResultsLoading: false,\n      });\n    } catch (err) {\n      \n    }\n  }\n\n  async submitVote(e, req) {\n    e.preventDefault();\n    if(this.state.selectedVote !== null) {\n      const { origin } = absoluteUrl(req);\n      const { slug } = this.props.router.query;\n      try {\n        const res = await fetch(`${origin}/api/poll/vote/${slug}`, {\n          method: 'POST',\n          headers: {\n            'Accept': 'accplication/json',\n            'Content-Type': 'application/json',\n            'X-Origin': 'statmix',\n          },\n          body: JSON.stringify({selectedVote: this.state.selectedVote})\n        });\n  \n        const data = await res.json();\n        //console.log(data);\n        \n        if(data.message === 'error') {\n          this.setState({ userDidVoteError: true });\n          //console.log('already voted');\n        } else {\n          if (localStorage.voteHistory) {\n            let voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          } else {\n            let voteHistory = [];\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          }\n\n          this.setState({\n            totalVotes: data.resultsData.totalVotes,\n            userDidVote: data.resultsData.userDidVote,\n            selectedVote: data.resultsData.selectedVote,\n            userDidVoteError: false\n          });\n          this.loadResults(e, req);\n        }\n        \n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      // user didnt select vote\n    }\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return <ErrorPage errorCode={this.props.errorCode} />\n    }\n\n    const { url } = this.props;\n\n    const {\n      title,\n      desc,\n      visibility,\n      active,\n      choices,\n      dateCreated,\n      visits,\n      timelimit,\n      category\n    } = this.props.poll;\n\n    const {\n      totalVotes,\n      results,\n      userDidVote,\n      userDidVoteError,\n      revealResults,\n      resultsLoading,\n      refreshResultsLoading\n    } = this.state;\n\n    return (\n      <Layout\n        pageTitle={`Poll - ${title}`}\n        pageDesc={desc}\n        visibility={visibility}\n        path={this.props.router.asPath}\n      >\n        <div className='poll-wrapper'>\n          {visibility === 'private' ?\n            <div className='poll-alert'>\n              <Alert variant='danger'>\n                This is a <b>private</b> poll. Please consider before sharing the link.\n              </Alert>\n            </div>\n          : null }\n          <h4 className='poll-title'>{title.length > 0 ? title : 'Untitled'}</h4>\n          <hr />\n          <div className='poll-desc mb-1'>\n            <h6>Description</h6>\n            <div>\n              <p>\n                {desc.length > 0 ? desc : <i>No description</i>}\n              </p>\n              <hr />\n              <div className='poll-stat'>\n                Category: {category}\n              </div>\n              <div className='poll-stat'>\n                {visits} views • {dateCreated}\n              </div>\n            </div>\n          </div>\n          <Row>\n            <Col>\n              <div className='poll-options mb-3'>\n                <ShareButton url={url} />\n                <ReportButton urlref={this.props.router.query.slug} title={title} />\n              </div>\n            </Col>\n          </Row>\n          <hr />\n\n          { active && !userDidVote ?\n          <PollChoices\n            userDidVote={userDidVote}\n            userDidVoteError={userDidVoteError}\n            timelimit={timelimit}\n            choices={choices}\n            revealResults={revealResults}\n            updateChoiceSelected={this.updateChoiceSelected}\n            submitVote={this.submitVote}\n            loadResults={this.loadResults}\n          /> : null }\n\n          { !active || userDidVote || revealResults ?\n            <PollResults\n              totalVotes={totalVotes}\n              results={results}\n              choices={choices}\n              timelimit={timelimit}\n              resultsLoading={resultsLoading}\n              refreshResultsLoading={refreshResultsLoading}\n              loadResults={this.loadResults}\n              active={active}\n            />\n            : null }\n        </div>\n      </Layout>\n    )\n  }\n}\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: [],\n  },\n  user: { userDidVote: false },\n  revealResults: false,\n  active: true\n}\n\nexport default withRouter(PollPage)"]},"metadata":{},"sourceType":"module"}