{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/Layout\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from 'react-bootstrap/Alert';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport PropTypes from 'prop-types';\nimport Cookies from 'js-cookie';\n\nclass Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '',\n      error: false,\n      success: false,\n      validated: false\n    };\n    this.inputUpdate = this.inputUpdate.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  inputUpdate(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this.setState({\n      validated: true\n    });\n\n    try {\n      const res = await fetch(`${window.location.origin}/api/v1/feedback`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: _JSON$stringify({\n          text: this.state.text\n        })\n      });\n      const data = await res.json();\n\n      if (data.message === 'success') {\n        this.setState({\n          error: false,\n          success: true,\n          text: '',\n          validated: false\n        }); // display sucess\n      } else {\n        this.setState({\n          error: true\n        }); // display error\n      }\n    } catch (err) {\n      // display error\n      this.setState({\n        error: true\n      });\n    }\n  }\n\n  render() {\n    const {\n      text,\n      error,\n      success,\n      validated\n    } = this.state;\n    return __jsx(Layout, null, __jsx(\"h4\", {\n      className: \"page-header\"\n    }, \"Feedback & Suggestions\"), __jsx(\"hr\", null), error ? __jsx(Alert, {\n      variant: \"danger\"\n    }, __jsx(\"b\", null, \"Error submitting form\")) : null, success ? __jsx(Alert, {\n      variant: \"success\"\n    }, __jsx(\"b\", null, __jsx(FontAwesomeIcon, {\n      icon: faCheck\n    }), \" Feedback/Suggestion Received. Thank You\")) : null, __jsx(\"p\", null, \"Got feedback or a suggestion? ThatPoll is always striving to improve our web application. Please share your thoughts below.\"), __jsx(Form, {\n      noValidate: true,\n      validated: validated,\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      style: {\n        padding: '1rem'\n      }\n    }, __jsx(Form.Group, {\n      controlId: \"validateText\"\n    }, __jsx(Form.Label, null, \"Text:\"), __jsx(Form.Control, {\n      value: text,\n      onChange: this.inputUpdate,\n      style: {\n        maxHeight: '180px',\n        minHeight: '112px'\n      },\n      as: \"textarea\",\n      rows: \"3\",\n      name: \"text\",\n      minLength: \"10\",\n      maxLength: \"500\",\n      required: true\n    }), __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, \"Please provide some text. Min 10 characters.\")), __jsx(Form.Group, {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: '2rem'\n      }\n    }, __jsx(Button, {\n      variant: \"light-blue\",\n      type: \"submit\",\n      style: {\n        width: '200px'\n      }\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default Feedback;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/pages/feedback.js"],"names":["Layout","Button","Form","Alert","FontAwesomeIcon","faCheck","PropTypes","Cookies","Feedback","React","Component","constructor","props","state","text","error","success","validated","inputUpdate","bind","handleSubmit","e","setState","target","name","value","preventDefault","form","currentTarget","checkValidity","stopPropagation","res","fetch","window","location","origin","method","headers","body","data","json","message","err","render","padding","maxHeight","minHeight","display","justifyContent","marginTop","width"],"mappings":"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","sourcesContent":["import Layout from \"../components/Layout\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Alert from 'react-bootstrap/Alert';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport PropTypes from 'prop-types';\nimport Cookies from 'js-cookie';\n\nclass Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      error: false,\n      success: false,\n      validated: false,\n    }\n\n    this.inputUpdate = this.inputUpdate.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  inputUpdate(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this.setState({ validated: true });\n    try {\n      const res = await fetch(`${window.location.origin}/api/v1/feedback`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: this.state.text\n        })\n      });\n\n      const data = await res.json();\n      if (data.message === 'success') {\n          this.setState({\n          error: false,\n          success: true,\n          text: '',\n          validated: false\n        });\n        // display sucess\n      } else {\n        this.setState({ error: true });\n        // display error\n      }\n\n\n    } catch(err) {\n        // display error\n        this.setState({ error: true });\n    }\n\n  }\n\n  render() {\n    const { text, error, success, validated } = this.state;\n    return (\n      <Layout>\n        <h4 className='page-header'>Feedback & Suggestions</h4>\n        <hr />\n        { error ?\n          <Alert variant='danger'>\n            <b>Error submitting form</b>\n          </Alert> : null\n        }\n        { success ?\n          <Alert variant='success'>\n            <b>\n              <FontAwesomeIcon icon={faCheck} /> Feedback/Suggestion Received. Thank You\n            </b>\n          </Alert> : null\n        }\n        <p>Got feedback or a suggestion? ThatPoll is always striving to improve our web application. Please share your thoughts below.</p>\n        <Form noValidate validated={validated} autoComplete='off' onSubmit={this.handleSubmit} style={{ padding: '1rem' }}>\n          <Form.Group controlId='validateText'>\n            <Form.Label>\n              Text:\n            </Form.Label>\n            <Form.Control\n              value={text}\n              onChange={this.inputUpdate}\n              style={{ maxHeight: '180px', minHeight: '112px' }}\n              as=\"textarea\" rows=\"3\" name='text' minLength='10' maxLength='500'\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide some text. Min 10 characters.\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group style={{ display: 'flex', justifyContent: 'center', marginTop: '2rem' }}>\n            <Button \n              variant='light-blue' type=\"submit\" style={{ width: '200px' }}>\n              Submit\n            </Button>\n          </Form.Group>\n        </Form>\n      </Layout>\n    )\n  }\n}\n\nexport default Feedback;\n"]},"metadata":{},"sourceType":"module"}