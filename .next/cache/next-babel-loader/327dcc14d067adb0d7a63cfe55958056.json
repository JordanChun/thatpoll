{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'next/router';\nimport ResultsBars from \"./ResultsBars\";\nimport ResultsPieChart from \"./ResultsPieChart\";\nimport Form from 'react-bootstrap/Form';\nimport { useState } from \"react\";\n\nfunction PollResults(props) {\n  const {\n    0: display,\n    1: setDisplay\n  } = useState('Bar');\n  const {\n    results,\n    choices,\n    totalVotes,\n    active,\n    loadResults,\n    refreshResultsLoading\n  } = props;\n\n  function toggleDisplay() {\n    display === 'Bar' ? setDisplay('Donut') : setDisplay('Bar');\n  }\n\n  return __jsx(\"div\", {\n    className: \"poll-results\"\n  }, __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"results-header\"\n  }, __jsx(\"div\", null, __jsx(\"h5\", null, __jsx(FontAwesomeIcon, {\n    icon: faChartBar\n  }), \" Results\", ' ', active ? __jsx(Button, {\n    variant: \"grey-blue\",\n    size: \"sm\",\n    onClick: loadResults,\n    style: {\n      margin: '0 0.5rem'\n    },\n    disabled: refreshResultsLoading\n  }, __jsx(FontAwesomeIcon, {\n    icon: faSync\n  }), \" Refresh\") : null, refreshResultsLoading ? __jsx(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    \"aria-hidden\": \"true\"\n  }) : null)), __jsx(\"div\", {\n    className: \"result-display\"\n  }, \"Display: \", display, __jsx(Form, null, __jsx(Form.Check, {\n    id: \"switch-result-display\",\n    type: \"switch\",\n    label: \"\",\n    onChange: () => toggleDisplay(),\n    checked: display === 'Donut' ? false : true\n  })))), display === 'Bar' ? __jsx(ResultsBars, {\n    results: results,\n    choices: choices,\n    totalVotes: totalVotes\n  }) : __jsx(ResultsPieChart, {\n    results: results,\n    choices: choices,\n    totalVotes: totalVotes\n  }));\n}\n\nPollResults.propTypes = {\n  totalVotes: PropTypes.number.isRequired,\n  results: PropTypes.array.isRequired,\n  choices: PropTypes.array.isRequired,\n  resultsLoading: PropTypes.bool.isRequired,\n  refreshResultsLoading: PropTypes.bool.isRequired,\n  active: PropTypes.bool.isRequired,\n  loadResults: PropTypes.func.isRequired\n};\nexport default withRouter(PollResults);","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/thatpoll/components/PollResults.js"],"names":["FontAwesomeIcon","faChartBar","faSync","Spinner","Button","PropTypes","withRouter","ResultsBars","ResultsPieChart","Form","useState","PollResults","props","display","setDisplay","results","choices","totalVotes","active","loadResults","refreshResultsLoading","toggleDisplay","margin","propTypes","number","isRequired","array","resultsLoading","bool","func"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'next/router';\nimport ResultsBars from \"./ResultsBars\";\nimport ResultsPieChart from \"./ResultsPieChart\";\nimport Form from 'react-bootstrap/Form';\nimport { useState } from \"react\";\n\nfunction PollResults(props) {\n  const [display, setDisplay] = useState('Bar');\n  const { results, choices, totalVotes, active, loadResults, refreshResultsLoading } = props;\n\n  function toggleDisplay() {\n    display === 'Bar' ? setDisplay('Donut') : setDisplay('Bar');\n  }\n\n  return (\n    <div className='poll-results'>\n      <hr />\n      <div className='results-header'>\n        <div>\n          <h5>\n            <FontAwesomeIcon icon={faChartBar} /> Results{' '}\n            {active ?\n              <Button\n                variant='grey-blue'\n                size='sm'\n                onClick={loadResults}\n                style={{ margin: '0 0.5rem' }}\n                disabled={refreshResultsLoading}\n              >\n                <FontAwesomeIcon icon={faSync} /> Refresh\n              </Button> : null}\n            {refreshResultsLoading ?\n              <Spinner\n                animation=\"border\"\n                size=\"sm\"\n                aria-hidden=\"true\"\n              /> : null\n            }\n          </h5>\n        </div>\n        <div className='result-display'>\n          Display: {display}\n          <Form>\n            <Form.Check\n              id='switch-result-display'\n              type=\"switch\"\n              label=''\n              onChange={() => toggleDisplay()}\n              checked={display === 'Donut' ? false : true}\n            />\n          </Form>\n        </div>\n\n      </div>\n      {display === 'Bar' ?\n        <ResultsBars\n          results={results}\n          choices={choices}\n          totalVotes={totalVotes}\n        /> :\n        <ResultsPieChart\n          results={results}\n          choices={choices}\n          totalVotes={totalVotes}\n        />\n      }\n    </div>\n  )\n}\n\nPollResults.propTypes = {\n  totalVotes: PropTypes.number.isRequired,\n  results: PropTypes.array.isRequired,\n  choices: PropTypes.array.isRequired,\n  resultsLoading: PropTypes.bool.isRequired,\n  refreshResultsLoading: PropTypes.bool.isRequired,\n  active: PropTypes.bool.isRequired,\n  loadResults: PropTypes.func.isRequired,\n}\n\nexport default withRouter(PollResults);\n"]},"metadata":{},"sourceType":"module"}