{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport CustomDropdownToggle from \"./CustomDropdownToggle\";\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\n\nvar MainHeaderSettings =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MainHeaderSettings, _React$Component);\n\n  function MainHeaderSettings(props, context) {\n    var _this;\n\n    _classCallCheck(this, MainHeaderSettings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainHeaderSettings).call(this, props, context));\n    _this.state = {\n      theme: 'dark'\n    };\n    _this.toggleTheme = _this.toggleTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MainHeaderSettings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (localStorage.theme) {\n        var theme = localStorage.getItem('theme');\n        if (theme !== 'dark' && theme !== 'light') theme = 'dark';\n        document.documentElement.setAttribute('data-theme', theme);\n        this.setState({\n          theme: theme\n        });\n      } else {\n        localStorage.setItem('theme', 'dark');\n      }\n    }\n  }, {\n    key: \"toggleTheme\",\n    value: function toggleTheme(e) {\n      var theme = this.state.theme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('theme', theme);\n      document.documentElement.setAttribute('data-theme', theme);\n      this.setState({\n        theme: theme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          style = _this$props.style;\n      var theme = this.state.theme;\n      return __jsx(\"div\", {\n        className: className,\n        style: style\n      }, __jsx(\"div\", null, __jsx(\"div\", null, \"Theme\"), __jsx(Form, null, __jsx(Form.Check, {\n        id: \"switch-theme\",\n        type: \"switch\",\n        label: theme === 'dark' ? 'Dark' : 'Light',\n        onChange: this.toggleTheme\n      }))));\n    }\n  }]);\n\n  return MainHeaderSettings;\n}(React.Component);\n\nexport default MainHeaderSettings;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/components/MainHeaderSettings.js"],"names":["CustomDropdownToggle","Form","Dropdown","FontAwesomeIcon","faCog","MainHeaderSettings","props","context","state","theme","toggleTheme","bind","localStorage","getItem","document","documentElement","setAttribute","setState","setItem","e","className","style","React","Component"],"mappings":";;;;;;;;AAAA,OAAOA,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,KAAT,QAAsB,mCAAtB;;IAEMC,kB;;;;;AACJ,8BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,4FAAMD,KAAN,EAAaC,OAAb;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAKA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AAR0B;AAS3B;;;;wCAEmB;AAClB,UAAIC,YAAY,CAACH,KAAjB,EAAwB;AACtB,YAAIA,KAAK,GAAGG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AACA,YAAIJ,KAAK,KAAK,MAAV,IAAoBA,KAAK,KAAK,OAAlC,EAA2CA,KAAK,GAAG,MAAR;AAC3CK,QAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,YAAtC,EAAoDP,KAApD;AACA,aAAKQ,QAAL,CAAc;AAAER,UAAAA,KAAK,EAALA;AAAF,SAAd;AACD,OALD,MAKO;AACLG,QAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8B,MAA9B;AACD;AACF;;;gCAEWC,C,EAAG;AACb,UAAMV,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,KAAqB,OAArB,GAA+B,MAA/B,GAAwC,OAAtD;AACAG,MAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BT,KAA9B;AACAK,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,YAAtC,EAAoDP,KAApD;AACA,WAAKQ,QAAL,CAAc;AAAER,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD;;;6BAEQ;AAAA,wBACsB,KAAKH,KAD3B;AAAA,UACCc,SADD,eACCA,SADD;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UAGCZ,KAHD,GAGW,KAAKD,KAHhB,CAGCC,KAHD;AAKP,aACE;AAAK,QAAA,SAAS,EAAEW,SAAhB;AAA2B,QAAA,KAAK,EAAEC;AAAlC,SACE,mBACE,2BADF,EAEE,MAAC,IAAD,QACE,MAAC,IAAD,CAAM,KAAN;AACE,QAAA,EAAE,EAAC,cADL;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAEZ,KAAK,KAAK,MAAV,GAAmB,MAAnB,GAA4B,OAHrC;AAIE,QAAA,QAAQ,EAAE,KAAKC;AAJjB,QADF,CAFF,CADF,CADF;AAgBD;;;;EAnD8BY,KAAK,CAACC,S;;AAuDvC,eAAelB,kBAAf","sourcesContent":["import CustomDropdownToggle from \"./CustomDropdownToggle\";\nimport Form from 'react-bootstrap/Form';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\n\nclass MainHeaderSettings extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      theme: 'dark'\n\n    };\n\n    this.toggleTheme = this.toggleTheme.bind(this);\n  }\n  \n  componentDidMount() {\n    if (localStorage.theme) {\n      let theme = localStorage.getItem('theme');\n      if (theme !== 'dark' && theme !== 'light') theme = 'dark';\n      document.documentElement.setAttribute('data-theme', theme)\n      this.setState({ theme });\n    } else {\n      localStorage.setItem('theme', 'dark');\n    }\n  }\n\n  toggleTheme(e) {\n    const theme = this.state.theme === 'light' ? 'dark' : 'light';\n    localStorage.setItem('theme', theme);\n    document.documentElement.setAttribute('data-theme', theme)\n    this.setState({ theme });\n  }\n\n  render() {\n    const { className, style } = this.props;\n\n    const { theme } = this.state;\n\n    return (\n      <div className={className} style={style}>\n        <div>\n          <div>Theme</div>\n          <Form>\n            <Form.Check \n              id='switch-theme'\n              type=\"switch\"\n              label={theme === 'dark' ? 'Dark' : 'Light' }\n              onChange={this.toggleTheme}\n            />\n          </Form>\n\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default MainHeaderSettings;"]},"metadata":{},"sourceType":"module"}