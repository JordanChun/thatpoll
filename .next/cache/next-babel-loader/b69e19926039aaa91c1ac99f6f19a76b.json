{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Pagination from 'react-bootstrap/Pagination';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'next/router';\n\nvar PollPagination = function PollPagination(props) {\n  var active;\n\n  if (props.router.query.page) {\n    active = props.router.query.page;\n  } else {\n    active = 1;\n  }\n\n  var items = [];\n  var offset = 0;\n\n  if (active > 3) {\n    offset = active - 3;\n    items.push(__jsx(\"li\", {\n      className: \"page-item\",\n      key: \"prev\"\n    }, __jsx(Link, {\n      href: {\n        pathname: '/',\n        query: {\n          page: active - 1\n        }\n      },\n      as: \"?page=\".concat(active - 1)\n    }, __jsx(\"a\", {\n      className: \"page-link\",\n      role: \"button\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\u2039\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \"Previous\")))));\n  }\n\n  var totalItems = props.totalItems;\n  var totalPages = Math.ceil(totalItems / 10);\n  if (totalPages === 0) totalPages = 1;\n  active = Math.min(Math.max(active, 1), totalPages); // max offset = total pages - max pagination items\n\n  offset = Math.min(Math.max(offset, 0), Math.max(totalPages - 5, 0)); //offset = Math.min(Math.max(offset, 0), (totalPages - 5));\n\n  for (var i = 1; i <= 5; i++) {\n    if (i > totalPages) break;\n\n    if (i + offset === active) {\n      items.push(__jsx(\"li\", {\n        className: \"page-item active\",\n        key: i\n      }, __jsx(Link, {\n        href: {\n          pathname: '/',\n          query: {\n            page: i + offset\n          }\n        },\n        as: \"?page=\".concat(i + offset)\n      }, __jsx(\"a\", {\n        className: \"page-link\"\n      }, i + offset)), __jsx(\"span\", {\n        className: \"sr-only\"\n      }, \"(current)\")));\n    } else {\n      items.push(__jsx(\"li\", {\n        className: \"page-item\",\n        key: i\n      }, __jsx(Link, {\n        href: {\n          pathname: '/',\n          query: {\n            page: i + offset\n          }\n        },\n        as: \"?page=\".concat(i + offset)\n      }, __jsx(\"a\", {\n        className: \"page-link\"\n      }, i + offset))));\n    }\n  }\n\n  if (active < totalPages - 2) {\n    items.push(__jsx(\"li\", {\n      className: \"page-item\",\n      key: \"next\"\n    }, __jsx(Link, {\n      href: {\n        pathname: '/',\n        query: {\n          page: active + 1\n        }\n      },\n      as: \"?page=\".concat(active + 1)\n    }, __jsx(\"a\", {\n      className: \"page-link\",\n      role: \"button\"\n    }, __jsx(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"\\u203A\"), __jsx(\"span\", {\n      className: \"sr-only\"\n    }, \"Next\")))));\n  }\n\n  return __jsx(Pagination, null, items);\n};\n\nPollPagination.propTypes = {\n  totalItems: PropTypes.number.isRequired\n};\nexport default withRouter(PollPagination);","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/thatpoll/components/PollPagination.js"],"names":["Pagination","Link","PropTypes","withRouter","PollPagination","props","active","router","query","page","items","offset","push","pathname","totalItems","totalPages","Math","ceil","min","max","i","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import Pagination from 'react-bootstrap/Pagination';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'next/router';\n\nconst PollPagination = props => {\n  let active;\n  if (props.router.query.page) {\n    active = props.router.query.page;\n  } else {\n    active = 1;\n  }\n  let items = [];\n  let offset = 0;\n\n  if (active > 3) {\n    offset = active - 3;\n    items.push(\n      <li className='page-item' key='prev'>\n        <Link href={{ pathname: '/', query: { page: active - 1 } }} as={`?page=${active - 1}`}>\n          <a className=\"page-link\" role=\"button\">\n            <span aria-hidden=\"true\">‹</span>\n            <span className=\"sr-only\">Previous</span>\n          </a>\n        </Link>\n      </li>\n    )\n  }\n  \n  const totalItems = props.totalItems;\n  let totalPages = Math.ceil(totalItems/10);\n  if (totalPages === 0) totalPages = 1;\n  active = Math.min(Math.max(active, 1), totalPages);\n  // max offset = total pages - max pagination items\n  offset = Math.min(Math.max(offset, 0), Math.max((totalPages - 5), 0));\n  //offset = Math.min(Math.max(offset, 0), (totalPages - 5));\n  \n\n  for (let i = 1; i <= 5; i++) {\n    if (i > totalPages) break;\n    if ((i + offset) === active) {\n      items.push(\n        <li className=\"page-item active\" key={i}>\n          <Link href={{ pathname: '/', query: { page: i + offset } }} as={`?page=${i + offset}`}>\n            <a className='page-link'>{i + offset}</a>\n          </Link>\n          <span className=\"sr-only\">(current)</span>\n        </li>\n      );\n    } else {\n      items.push(\n        <li className=\"page-item\" key={i}>\n          <Link href={{ pathname: '/', query: { page: i + offset } }} as={`?page=${i + offset}`}>\n            <a className=\"page-link\">{i + offset}</a>\n          </Link>\n        </li>\n      )\n    }\n  }\n\n  if (active < totalPages - 2) {\n    items.push(\n      <li className='page-item' key='next'>\n        <Link href={{ pathname: '/', query: { page: active + 1 } }} as={`?page=${active + 1}`}>\n          <a className=\"page-link\" role=\"button\">\n            <span aria-hidden=\"true\">›</span>\n            <span className=\"sr-only\">Next</span>\n          </a>\n        </Link>\n      </li>\n    )\n  }\n\n  return (\n    <Pagination>\n      {items}\n    </Pagination>\n  )\n}\n\nPollPagination.propTypes = {\n  totalItems: PropTypes.number.isRequired,\n}\n\nexport default withRouter(PollPagination);"]},"metadata":{},"sourceType":"module"}