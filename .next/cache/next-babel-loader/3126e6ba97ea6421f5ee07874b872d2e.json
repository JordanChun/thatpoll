{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router';\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport io from 'socket.io-client';\nimport moment from 'moment';\nimport getMomentTimelimit from '../helpers/momentFunctions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\n\nvar PollPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PollPage, _React$Component);\n\n  _createClass(PollPage, null, [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctx) {\n        var _absoluteUrl, origin, slug, clientIp, res, errorCode, data, url;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _absoluteUrl = absoluteUrl(ctx.req), origin = _absoluteUrl.origin;\n                slug = ctx.query.slug;\n\n                if (ctx.req && ctx.req.headers) {\n                  clientIp = ctx.req.headers['x-forwarded-for'] || ctx.req.connection.remoteAddress;\n                }\n\n                _context.next = 5;\n                return fetch(\"\".concat(origin, \"/api/v1/poll/\").concat(slug), {\n                  method: 'POST',\n                  headers: {\n                    'X-IP': clientIp\n                  }\n                });\n\n              case 5:\n                res = _context.sent;\n                errorCode = res.status > 200 ? res.status : false;\n                _context.next = 9;\n                return res.json();\n\n              case 9:\n                data = _context.sent;\n                url = \"\".concat(origin, \"/poll/\").concat(slug);\n                return _context.abrupt(\"return\", {\n                  errorCode: errorCode,\n                  poll: data.pollData,\n                  user: data.userData,\n                  url: url\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  function PollPage(props) {\n    var _this;\n\n    _classCallCheck(this, PollPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PollPage).call(this, props));\n    _this.state = {\n      totalVotes: _this.props.poll.totalVotes,\n      results: _this.props.poll.results,\n      userDidVote: _this.props.user.didVote,\n      revealResults: !_this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false,\n      submitError: false,\n      timelimit: _this.props.poll.timelimit\n    };\n    _this.updateChoiceSelected = _this.updateChoiceSelected.bind(_assertThisInitialized(_this));\n    _this.loadResults = _this.loadResults.bind(_assertThisInitialized(_this));\n    _this.submitVote = _this.submitVote.bind(_assertThisInitialized(_this));\n    _this.connectSocket = _this.connectSocket.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PollPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.poll.active) {\n        this.connectSocket();\n        var updateTimelimit = setInterval(function () {\n          var timelimit = getMomentTimelimit(_this2.props.poll.dateCreated, _this2.props.poll.votingPeriod);\n\n          _this2.setState({\n            timelimit: timelimit\n          });\n        }, 60000);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.socket) {\n        this.socket.close();\n      }\n\n      clearInterval(this.updateTimelimit);\n    }\n  }, {\n    key: \"connectSocket\",\n    value: function connectSocket() {\n      var _this3 = this;\n\n      this.socket = io();\n      this.socket.emit('joinPollRoom', this.props.router.query.slug);\n      this.socket.on('updateResults', function (selectedVote) {\n        var newResults = _this3.state.results.slice(0);\n\n        newResults[selectedVote]++;\n\n        _this3.setState({\n          results: newResults,\n          totalVotes: _this3.state.totalVotes + 1\n        });\n      });\n    }\n  }, {\n    key: \"updateChoiceSelected\",\n    value: function updateChoiceSelected(e) {\n      this.setState({\n        selectedVote: e.target.value\n      });\n    }\n  }, {\n    key: \"loadResults\",\n    value: function () {\n      var _loadResults = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e, req) {\n        var _absoluteUrl2, origin, slug, res, data;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _absoluteUrl2 = absoluteUrl(req), origin = _absoluteUrl2.origin;\n                slug = this.props.router.query.slug;\n\n                if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n                  this.setState({\n                    refreshResultsLoading: true,\n                    revealResults: true\n                  });\n                } else {\n                  this.setState({\n                    revealResults: true,\n                    resultsLoading: true\n                  });\n                }\n\n                _context2.prev = 3;\n                _context2.next = 6;\n                return fetch(\"\".concat(origin, \"/api/v1/poll/results/\").concat(slug), {\n                  method: 'POST'\n                });\n\n              case 6:\n                res = _context2.sent;\n                _context2.next = 9;\n                return res.json();\n\n              case 9:\n                data = _context2.sent;\n                this.setState({\n                  totalVotes: data.totalVotes,\n                  userDidVote: data.userDidVote,\n                  results: data.results,\n                  resultsLoading: false,\n                  refreshResultsLoading: false\n                });\n                _context2.next = 15;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](3);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 13]]);\n      }));\n\n      function loadResults(_x2, _x3) {\n        return _loadResults.apply(this, arguments);\n      }\n\n      return loadResults;\n    }()\n  }, {\n    key: \"submitVote\",\n    value: function () {\n      var _submitVote = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(e, req) {\n        var _absoluteUrl3, origin, slug, res, data, voteHistory, _voteHistory;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                e.preventDefault();\n\n                if (!(this.state.selectedVote !== null)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                _absoluteUrl3 = absoluteUrl(req), origin = _absoluteUrl3.origin;\n                slug = this.props.router.query.slug;\n                _context3.prev = 4;\n                _context3.next = 7;\n                return fetch(\"\".concat(origin, \"/api/v1/poll/vote/\").concat(slug), {\n                  method: 'POST',\n                  headers: {\n                    'Accept': 'accplication/json',\n                    'Content-Type': 'application/json'\n                  },\n                  body: _JSON$stringify({\n                    selectedVote: this.state.selectedVote\n                  })\n                });\n\n              case 7:\n                res = _context3.sent;\n                _context3.next = 10;\n                return res.json();\n\n              case 10:\n                data = _context3.sent;\n\n                if (data.message === 'error') {\n                  this.setState({\n                    userDidVoteError: true\n                  });\n                } else {\n                  if (localStorage.voteHistory) {\n                    voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n                    voteHistory.unshift({\n                      title: this.props.poll.title,\n                      url: this.props.router.query.slug\n                    });\n                    voteHistory = _JSON$stringify(voteHistory);\n                    localStorage.setItem('voteHistory', voteHistory);\n                  } else {\n                    _voteHistory = [];\n\n                    _voteHistory.unshift({\n                      title: this.props.poll.title,\n                      url: this.props.router.query.slug\n                    });\n\n                    _voteHistory = _JSON$stringify(_voteHistory);\n                    localStorage.setItem('voteHistory', _voteHistory);\n                  }\n\n                  this.setState({\n                    userDidVote: true\n                  });\n                }\n\n                _context3.next = 17;\n                break;\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t0 = _context3[\"catch\"](4);\n                this.setState({\n                  submitError: true\n                });\n\n              case 17:\n                _context3.next = 19;\n                break;\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 14]]);\n      }));\n\n      function submitVote(_x4, _x5) {\n        return _submitVote.apply(this, arguments);\n      }\n\n      return submitVote;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if not data found for poll\n      if (this.props.errorCode) {\n        return __jsx(ErrorPage, {\n          errorCode: this.props.errorCode\n        });\n      }\n\n      var url = this.props.url;\n      var _this$props$poll = this.props.poll,\n          title = _this$props$poll.title,\n          desc = _this$props$poll.desc,\n          visibility = _this$props$poll.visibility,\n          active = _this$props$poll.active,\n          choices = _this$props$poll.choices,\n          dateCreated = _this$props$poll.dateCreated,\n          visits = _this$props$poll.visits,\n          category = _this$props$poll.category;\n      var _this$state = this.state,\n          totalVotes = _this$state.totalVotes,\n          results = _this$state.results,\n          userDidVote = _this$state.userDidVote,\n          userDidVoteError = _this$state.userDidVoteError,\n          revealResults = _this$state.revealResults,\n          resultsLoading = _this$state.resultsLoading,\n          refreshResultsLoading = _this$state.refreshResultsLoading,\n          submitError = _this$state.submitError,\n          selectedVote = _this$state.selectedVote,\n          timelimit = _this$state.timelimit;\n      return __jsx(Layout, {\n        pageTitle: \"Poll - \".concat(title),\n        pageDesc: desc,\n        visibility: visibility,\n        path: this.props.router.asPath,\n        ads: true\n      }, __jsx(\"div\", {\n        className: \"poll-wrapper\"\n      }, visibility === 'private' ? __jsx(\"div\", {\n        className: \"poll-alert\"\n      }, __jsx(Alert, {\n        variant: \"danger\"\n      }, \"This is a \", __jsx(\"b\", null, \"private\"), \" poll. Please consider before sharing the link.\")) : null, __jsx(\"h4\", {\n        className: \"poll-title\"\n      }, title.length > 0 ? title : 'Untitled'), __jsx(\"hr\", null), __jsx(\"div\", {\n        className: \"poll-desc mb-1\"\n      }, __jsx(\"h6\", null, \"Description\"), __jsx(\"div\", null, __jsx(\"p\", null, desc.length > 0 ? desc : __jsx(\"i\", null, \"No description\")), __jsx(\"hr\", null), __jsx(\"div\", {\n        className: \"poll-stat\"\n      }, \"Category: \", category), __jsx(\"div\", {\n        className: \"poll-stat\"\n      }, visits.toLocaleString(), \" views \\u2022 \", moment.utc(dateCreated).local().format('ll')))), __jsx(Row, null, __jsx(Col, null, __jsx(\"div\", {\n        className: \"poll-options mb-3\"\n      }, __jsx(ShareButton, {\n        url: url\n      }), __jsx(ReportButton, {\n        urlref: this.props.router.query.slug,\n        polltitle: title\n      })))), __jsx(\"div\", {\n        className: \"poll-time\"\n      }, __jsx(\"h6\", null, __jsx(FontAwesomeIcon, {\n        icon: faInfoCircle,\n        style: {\n          marginRight: '0.25rem'\n        }\n      }), \" \", __jsx(\"b\", null, totalVotes.toLocaleString()), \" votes \\u2022 \", active && timelimit != 'Voting has ended' ? 'Voting ends in:' : null, \" \", __jsx(\"b\", null, timelimit))), active && !userDidVote ? __jsx(PollChoices, {\n        userDidVote: userDidVote,\n        userDidVoteError: userDidVoteError,\n        submitError: submitError,\n        choices: choices,\n        revealResults: revealResults,\n        updateChoiceSelected: this.updateChoiceSelected,\n        submitVote: this.submitVote,\n        loadResults: this.loadResults,\n        selectedVote: selectedVote\n      }) : null, !active || userDidVote || revealResults ? __jsx(PollResults, {\n        totalVotes: totalVotes,\n        results: results,\n        choices: choices,\n        resultsLoading: resultsLoading,\n        refreshResultsLoading: refreshResultsLoading,\n        loadResults: this.loadResults,\n        active: active\n      }) : null));\n    }\n  }]);\n\n  return PollPage;\n}(React.Component);\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: []\n  },\n  user: {\n    userDidVote: false\n  },\n  revealResults: false,\n  active: true\n};\nexport default withRouter(PollPage);","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/thatpoll/pages/poll.js"],"names":["Layout","fetch","Alert","PollChoices","PollResults","withRouter","ErrorPage","absoluteUrl","InputGroup","FormControl","Button","ShareButton","ReportButton","Row","Col","io","moment","getMomentTimelimit","FontAwesomeIcon","faInfoCircle","PollPage","ctx","req","origin","slug","query","headers","clientIp","connection","remoteAddress","method","res","errorCode","status","json","data","url","poll","pollData","user","userData","props","state","totalVotes","results","userDidVote","didVote","revealResults","active","resultsLoading","refreshResultsLoading","selectedVote","userDidVoteError","submitError","timelimit","updateChoiceSelected","bind","loadResults","submitVote","connectSocket","updateTimelimit","setInterval","dateCreated","votingPeriod","setState","socket","close","clearInterval","emit","router","on","newResults","slice","e","target","value","preventDefault","body","message","localStorage","voteHistory","JSON","parse","getItem","unshift","title","setItem","desc","visibility","choices","visits","category","asPath","length","toLocaleString","utc","local","format","marginRight","React","Component","defaultProps"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { withRouter } from 'next/router'\nimport ErrorPage from './_error';\nimport absoluteUrl from 'next-absolute-url';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ShareButton from '../components/ShareButton';\nimport { ReportButton } from '../components/Report';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport io from 'socket.io-client';\nimport moment from 'moment';\nimport getMomentTimelimit from '../helpers/momentFunctions';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons';\n\n\nclass PollPage extends React.Component {\n  static async getInitialProps(ctx) {\n    const { origin } = absoluteUrl(ctx.req);\n    const { slug } = ctx.query;\n    let clientIp;\n    if (ctx.req && ctx.req.headers) {\n      clientIp = ctx.req.headers['x-forwarded-for'] || ctx.req.connection.remoteAddress;\n    }\n    const res = await fetch(`${origin}/api/v1/poll/${slug}`, {\n      method: 'POST',\n      headers: { \n        'X-IP': clientIp\n      }\n    });\n    const errorCode = res.status > 200 ? res.status : false\n    const data = await res.json()\n    const url = `${origin}/poll/${slug}`;\n    return { errorCode, poll: data.pollData, user: data.userData, url: url }\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      totalVotes: this.props.poll.totalVotes,\n      results: this.props.poll.results,\n      userDidVote: this.props.user.didVote,\n      revealResults: !this.props.poll.active,\n      resultsLoading: false,\n      refreshResultsLoading: false,\n      selectedVote: null,\n      userDidVoteError: false,\n      submitError: false,\n      timelimit: this.props.poll.timelimit\n    }\n\n    this.updateChoiceSelected = this.updateChoiceSelected.bind(this);\n    this.loadResults = this.loadResults.bind(this);\n    this.submitVote = this.submitVote.bind(this);\n    this.connectSocket = this.connectSocket.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.poll.active) {\n      this.connectSocket();\n      const updateTimelimit = setInterval(() => {\n        let timelimit = getMomentTimelimit(this.props.poll.dateCreated, this.props.poll.votingPeriod);\n        this.setState({\n          timelimit: timelimit\n        })\n      }, 60000)\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.close();\n    }\n    clearInterval(this.updateTimelimit);\n  }\n  \n  connectSocket() {\n    this.socket = io();\n    this.socket.emit('joinPollRoom', this.props.router.query.slug);\n    this.socket.on('updateResults', selectedVote => {\n      const newResults = this.state.results.slice(0);\n      newResults[selectedVote]++;\n      this.setState({\n        results: newResults,\n        totalVotes: this.state.totalVotes + 1\n      });\n    });\n  }\n\n  updateChoiceSelected(e) {\n    this.setState({ selectedVote: e.target.value });\n  }\n\n  async loadResults(e, req) {\n    const { origin } = absoluteUrl(req);\n    const { slug } = this.props.router.query;\n\n    if (this.state.revealResults || this.state.userDidVote || this.props.active) {\n      this.setState({ refreshResultsLoading: true, revealResults: true });\n    } else {\n      this.setState({ revealResults: true, resultsLoading: true });\n    }\n\n    try {\n      const res = await fetch(`${origin}/api/v1/poll/results/${slug}`, {\n        method: 'POST',\n      });\n      const data = await res.json();\n\n      this.setState({\n        totalVotes: data.totalVotes,\n        userDidVote: data.userDidVote,\n        results: data.results,\n        resultsLoading: false,\n        refreshResultsLoading: false,\n      });\n    } catch (err) {\n      \n    }\n  }\n\n  async submitVote(e, req) {\n    e.preventDefault();\n    if(this.state.selectedVote !== null) {\n      const { origin } = absoluteUrl(req);\n      const { slug } = this.props.router.query;\n      try {\n        const res = await fetch(`${origin}/api/v1/poll/vote/${slug}`, {\n          method: 'POST',\n          headers: {\n            'Accept': 'accplication/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({selectedVote: this.state.selectedVote})\n        });\n  \n        const data = await res.json();\n\n        if(data.message === 'error') {\n          this.setState({ userDidVoteError: true });\n        } else {\n          if (localStorage.voteHistory) {\n            let voteHistory = JSON.parse(localStorage.getItem('voteHistory'));\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          } else {\n            let voteHistory = [];\n            voteHistory.unshift({ title: this.props.poll.title, url: this.props.router.query.slug });\n            voteHistory = JSON.stringify(voteHistory)\n            localStorage.setItem('voteHistory', voteHistory);\n          }\n\n          this.setState({ userDidVote: true });\n        }\n        \n      } catch (err) {\n        this.setState({ submitError: true });\n      }\n    } else {\n      // user didnt select vote\n    }\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return <ErrorPage errorCode={this.props.errorCode} />\n    }\n\n    const { url } = this.props;\n\n    const {\n      title,\n      desc,\n      visibility,\n      active,\n      choices,\n      dateCreated,\n      visits,\n      category,\n    } = this.props.poll;\n\n    const {\n      totalVotes,\n      results,\n      userDidVote,\n      userDidVoteError,\n      revealResults,\n      resultsLoading,\n      refreshResultsLoading,\n      submitError,\n      selectedVote,\n      timelimit\n    } = this.state;\n\n    return (\n      <Layout\n        pageTitle={`Poll - ${title}`}\n        pageDesc={desc}\n        visibility={visibility}\n        path={this.props.router.asPath}\n        ads={true}\n      >\n        <div className='poll-wrapper'>\n          {visibility === 'private' ?\n            <div className='poll-alert'>\n              <Alert variant='danger'>\n                This is a <b>private</b> poll. Please consider before sharing the link.\n              </Alert>\n            </div>\n          : null }\n          <h4 className='poll-title'>{title.length > 0 ? title : 'Untitled'}</h4>\n          <hr />\n          <div className='poll-desc mb-1'>\n            <h6>Description</h6>\n            <div>\n              <p>\n                {desc.length > 0 ? desc : <i>No description</i>}\n              </p>\n              <hr />\n              <div className='poll-stat'>\n                Category: {category}\n              </div>\n              <div className='poll-stat'>\n                {visits.toLocaleString()} views • {moment.utc(dateCreated).local().format('ll')}\n              </div>\n            </div>\n          </div>\n          <Row>\n            <Col>\n              <div className='poll-options mb-3'>\n                <ShareButton url={url} />\n                <ReportButton urlref={this.props.router.query.slug} polltitle={title} />\n              </div>\n            </Col>\n          </Row>\n          <div className='poll-time'>\n            <h6>\n              <FontAwesomeIcon icon={faInfoCircle} style={{ marginRight: '0.25rem' }} /> <b>{totalVotes.toLocaleString()}</b> votes • {active && timelimit != 'Voting has ended' ? 'Voting ends in:' : null } <b>{timelimit}</b>\n            </h6>\n          </div>\n          { active && !userDidVote ?\n          <PollChoices\n            userDidVote={userDidVote}\n            userDidVoteError={userDidVoteError}\n            submitError={submitError}\n            choices={choices}\n            revealResults={revealResults}\n            updateChoiceSelected={this.updateChoiceSelected}\n            submitVote={this.submitVote}\n            loadResults={this.loadResults}\n            selectedVote={selectedVote}\n          /> : null }\n\n          { !active || userDidVote || revealResults ?\n            <PollResults\n              totalVotes={totalVotes}\n              results={results}\n              choices={choices}\n              resultsLoading={resultsLoading}\n              refreshResultsLoading={refreshResultsLoading}\n              loadResults={this.loadResults}\n              active={active}\n            />\n            : null }\n        </div>\n      </Layout>\n    )\n  }\n}\n\nPollPage.defaultProps = {\n  poll: {\n    totalVotes: 0,\n    results: [],\n  },\n  user: { userDidVote: false },\n  revealResults: false,\n  active: true\n}\n\nexport default withRouter(PollPage)"]},"metadata":{},"sourceType":"module"}