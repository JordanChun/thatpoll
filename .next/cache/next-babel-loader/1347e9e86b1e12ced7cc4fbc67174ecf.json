{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Form from 'react-bootstrap/Form';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\nimport Cookies from 'js-cookie';\n\nvar MainHeaderSettings =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(MainHeaderSettings, _React$Component);\n\n  function MainHeaderSettings(props, context) {\n    var _this;\n\n    _classCallCheck(this, MainHeaderSettings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MainHeaderSettings).call(this, props, context));\n    _this.state = {\n      theme: 'light'\n    };\n    _this.toggleTheme = _this.toggleTheme.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(MainHeaderSettings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // get theme\n      // if theme not light or dark set theme to light and set cookie\n      var theme = Cookies.get('theme');\n\n      if (theme !== 'light' && theme !== 'dark') {\n        theme = 'light';\n        Cookies.set('theme', theme, {\n          expires: 365\n        });\n      } else {\n        this.setState({\n          theme: theme\n        });\n      }\n    }\n  }, {\n    key: \"toggleTheme\",\n    value: function toggleTheme() {\n      var theme = Cookies.get('theme');\n      theme = theme === 'light' ? 'dark' : 'light';\n      Cookies.set('theme', theme, {\n        expires: 365\n      });\n      document.documentElement.setAttribute('data-theme', theme);\n      this.setState({\n        theme: theme\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          className = _this$props.className,\n          style = _this$props.style;\n      var theme = this.state.theme;\n      return __jsx(\"div\", {\n        className: className,\n        style: style\n      }, __jsx(\"h6\", null, \"Settings\"), __jsx(\"div\", {\n        className: \"dropdown-divider\"\n      }), __jsx(\"div\", null, __jsx(\"div\", null, \"Theme: \", theme === 'light' ? 'Light' : 'Dark'), __jsx(Form, null, __jsx(Form.Check, {\n        id: \"switch-theme\",\n        type: \"switch\",\n        label: \"\",\n        onChange: this.toggleTheme,\n        checked: theme === 'light' ? false : true\n      }))));\n    }\n  }]);\n\n  return MainHeaderSettings;\n}(React.Component);\n\nexport default MainHeaderSettings;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/thatpoll/components/layout/MainHeaderSettings.js"],"names":["Form","FontAwesomeIcon","faSun","faMoon","Cookies","MainHeaderSettings","props","context","state","theme","toggleTheme","bind","get","set","expires","setState","document","documentElement","setAttribute","className","style","React","Component"],"mappings":";;;;;;;;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,mCAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAEMC,kB;;;;;AACJ,8BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAC1B,4FAAMD,KAAN,EAAaC,OAAb;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAIA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,+BAAnB;AAP0B;AAQ3B;;;;wCAEmB;AAClB;AACA;AACA,UAAIF,KAAK,GAAGL,OAAO,CAACQ,GAAR,CAAY,OAAZ,CAAZ;;AACA,UAAIH,KAAK,KAAK,OAAV,IAAqBA,KAAK,KAAK,MAAnC,EAA2C;AACzCA,QAAAA,KAAK,GAAG,OAAR;AACAL,QAAAA,OAAO,CAACS,GAAR,CAAY,OAAZ,EAAqBJ,KAArB,EAA4B;AAAEK,UAAAA,OAAO,EAAE;AAAX,SAA5B;AACD,OAHD,MAGO;AACL,aAAKC,QAAL,CAAc;AAAEN,UAAAA,KAAK,EAALA;AAAF,SAAd;AACD;AACF;;;kCAEa;AACZ,UAAIA,KAAK,GAAGL,OAAO,CAACQ,GAAR,CAAY,OAAZ,CAAZ;AACAH,MAAAA,KAAK,GAAGA,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,OAArC;AACAL,MAAAA,OAAO,CAACS,GAAR,CAAY,OAAZ,EAAqBJ,KAArB,EAA4B;AAAEK,QAAAA,OAAO,EAAE;AAAX,OAA5B;AACAE,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC,YAAtC,EAAoDT,KAApD;AACA,WAAKM,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD;;;6BAEQ;AAAA,wBACsB,KAAKH,KAD3B;AAAA,UACCa,SADD,eACCA,SADD;AAAA,UACYC,KADZ,eACYA,KADZ;AAAA,UAECX,KAFD,GAEW,KAAKD,KAFhB,CAECC,KAFD;AAIP,aACE;AAAK,QAAA,SAAS,EAAEU,SAAhB;AAA2B,QAAA,KAAK,EAAEC;AAAlC,SACE,6BADF,EAEE;AAAK,QAAA,SAAS,EAAC;AAAf,QAFF,EAGE,mBACE,8BACUX,KAAK,KAAK,OAAV,GAAoB,OAApB,GAA8B,MADxC,CADF,EAIE,MAAC,IAAD,QACE,MAAC,IAAD,CAAM,KAAN;AACE,QAAA,EAAE,EAAC,cADL;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,KAAK,EAAC,EAHR;AAIE,QAAA,QAAQ,EAAE,KAAKC,WAJjB;AAKE,QAAA,OAAO,EAAED,KAAK,KAAK,OAAV,GAAoB,KAApB,GAA4B;AALvC,QADF,CAJF,CAHF,CADF;AAqBD;;;;EAxD8BY,KAAK,CAACC,S;;AA4DvC,eAAejB,kBAAf","sourcesContent":["import Form from 'react-bootstrap/Form';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from \"@fortawesome/free-solid-svg-icons\";\nimport Cookies from 'js-cookie';\n\nclass MainHeaderSettings extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    \n    this.state = {\n      theme: 'light'\n    };\n    \n    this.toggleTheme = this.toggleTheme.bind(this);\n  }\n  \n  componentDidMount() {\n    // get theme\n    // if theme not light or dark set theme to light and set cookie\n    let theme = Cookies.get('theme');\n    if (theme !== 'light' && theme !== 'dark') {\n      theme = 'light';\n      Cookies.set('theme', theme, { expires: 365 });\n    } else {\n      this.setState({ theme });\n    }\n  }\n  \n  toggleTheme() {\n    let theme = Cookies.get('theme');\n    theme = theme === 'light' ? 'dark' : 'light';\n    Cookies.set('theme', theme, { expires: 365 });\n    document.documentElement.setAttribute('data-theme', theme)\n    this.setState({ theme });\n  }\n\n  render() {\n    const { className, style } = this.props;\n    const { theme } = this.state;\n\n    return (\n      <div className={className} style={style}>\n        <h6>Settings</h6>\n        <div className=\"dropdown-divider\"></div>\n        <div>\n          <div>\n            Theme: {theme === 'light' ? 'Light' : 'Dark' }\n          </div>\n          <Form>\n            <Form.Check \n              id='switch-theme'\n              type=\"switch\"\n              label=''\n              onChange={this.toggleTheme}\n              checked={theme === 'light' ? false : true }\n            />\n          </Form>\n\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default MainHeaderSettings;"]},"metadata":{},"sourceType":"module"}