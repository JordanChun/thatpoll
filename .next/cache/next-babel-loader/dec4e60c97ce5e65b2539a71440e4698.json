{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { PageTransition } from 'next-page-transitions';\nimport { withRouter } from 'next/router';\nvar defaultStyle = {\n  width: 0\n};\n\nvar transitionStyles = function transitionStyles(resultWidth) {\n  var style = {\n    entering: {\n      width: \"\".concat(resultWidth, \"%\")\n    },\n    entered: {\n      width: \"\".concat(resultWidth, \"%\")\n    },\n    exit: {\n      width: 0\n    }\n  };\n  return style;\n};\n\nvar PollResults = function PollResults(props) {\n  return __jsx(\"div\", {\n    className: \"poll-results\"\n  }, __jsx(\"h5\", null, __jsx(FontAwesomeIcon, {\n    icon: faChartBar\n  }), \" Results\"), props.resultsLoading ? __jsx(\"div\", {\n    className: \"justify-content-center align-items-center\",\n    style: {\n      height: '200px',\n      display: 'flex'\n    }\n  }, __jsx(Spinner, {\n    animation: \"grow\",\n    variant: \"light\"\n  })) : __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"poll-stat mb-3\"\n  }, __jsx(\"b\", null, props.totalVotes, \" votes\"), \" \\u2022 \", __jsx(\"b\", null, props.timelimit)), __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"grey-blue\",\n    size: \"sm\",\n    onClick: props.loadResults\n  }, props.refreshResultsLoading ? __jsx(Spinner, {\n    as: \"span\",\n    animation: \"grow\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\"\n  }) : null, \"Refresh Results\")), __jsx(Transition, {\n    \"in\": props.revealResults,\n    timeout: 300,\n    appear: true\n  }, function (state) {\n    return __jsx(\"div\", {\n      className: \"results-container\"\n    }, props.results.map(function (result, i) {\n      return __jsx(\"div\", {\n        key: i\n      }, __jsx(\"h6\", null, props.choices[i]), __jsx(\"div\", {\n        className: \"poll-result\"\n      }, __jsx(\"div\", {\n        className: \"result-bar mb-3\",\n        style: _objectSpread({}, defaultStyle, {}, transitionStyles(Math.round(result / props.totalVotes * 100))[state])\n      }, __jsx(\"div\", null, result !== 0 ? \"\".concat(result, \" votes \\u2022 \").concat(Math.round(result / props.totalVotes * 100).toFixed(2), \"%\") : '0 votes • 0.00%'))));\n    }));\n  })));\n};\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n};\nexport default withRouter(PollResults);\n/*\nconst PollResults = props => (\n    <div className='poll-results'>\n      <h5><FontAwesomeIcon icon={faChartBar}/> Results</h5>\n      { props.resultsLoading ?\n        <div className='justify-content-center align-items-center' style={{height: '200px', display: 'flex'}}>\n          <Spinner animation=\"grow\" variant=\"light\" />\n        </div>\n        :\n        <div>\n          <div className='poll-stat mb-3'>\n            <b>{props.totalVotes} votes</b> • <b>{props.timelimit}</b>\n          </div>\n          <div className='mb-3'>\n            <Button variant='grey-blue' size='sm' onClick={props.loadResults}>\n              { props.refreshResultsLoading ? \n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                /> : null\n              }\n               Refresh Results\n            </Button>\n          </div>\n          <div className='results-container'>\n            {props.results.map((result, i) => (\n              <div key={i}>\n                <h6>{props.choices[i]}</h6>\n                <div className='poll-result'>\n                    <div \n                      className='result-bar mb-3'\n                      style={{width: `${Math.round((result/props.totalVotes) * 100)}%`}}\n                    >\n                      <div>\n                        {result !== 0 ?\n                          `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                          :\n                          '0 votes • 0.00%'\n                        }\n                      </div>\n                    </div>\n                </div>\n              </div>\n            ))}\n          </ReactCSSTransitionGroup>\n          </div>\n        </div>\n      }\n    </div>\n  );\n\n  */","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/components/PollResults.js"],"names":["FontAwesomeIcon","faChartBar","Spinner","Button","PropTypes","Transition","PageTransition","withRouter","defaultStyle","width","transitionStyles","resultWidth","style","entering","entered","exit","PollResults","props","resultsLoading","height","display","totalVotes","timelimit","loadResults","refreshResultsLoading","revealResults","state","results","map","result","i","choices","Math","round","toFixed","propTypes","func"],"mappings":"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","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { PageTransition } from 'next-page-transitions'\nimport { withRouter } from 'next/router';\n\nconst defaultStyle = {\n  width: 0,\n}\n\nconst transitionStyles = resultWidth => {\n  const style = {\n    entering: { width: `${resultWidth}%` },\n    entered:  { width: `${resultWidth}%` },\n    exit: { width: 0 }\n  }\n\n  return style\n};\n\n\nconst PollResults = props => (\n  <div className='poll-results'>\n    <h5><FontAwesomeIcon icon={faChartBar}/> Results</h5>\n    { props.resultsLoading ?\n      <div className='justify-content-center align-items-center' style={{height: '200px', display: 'flex'}}>\n        <Spinner animation=\"grow\" variant=\"light\" />\n      </div>\n      :\n      <div>\n        <div className='poll-stat mb-3'>\n          <b>{props.totalVotes} votes</b> • <b>{props.timelimit}</b>\n        </div>\n        <div className='mb-3'>\n          <Button variant='grey-blue' size='sm' onClick={props.loadResults}>\n            { props.refreshResultsLoading ? \n              <Spinner\n              as=\"span\"\n              animation=\"grow\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              /> : null\n            }\n             Refresh Results\n          </Button>\n        </div>\n        <Transition in={props.revealResults} timeout={300} appear>\n          {state => (\n            <div className='results-container'>\n                {props.results.map((result, i) => (\n                  <div key={i}>\n                    <h6>{props.choices[i]}</h6>\n                    <div className='poll-result'>\n                      <div className='result-bar mb-3'\n                        style={{\n                          ...defaultStyle,\n                          ...transitionStyles(Math.round((result/props.totalVotes) * 100))[state]\n                        }}\n                      >\n                        <div>\n                          {result !== 0 ?\n                            `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                            : '0 votes • 0.00%' }\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          )}\n        </Transition>\n        {/*\n        <Transition in={props.revealResults} timeout={300} appear>\n            {state => (\n          <div className='results-container'>\n              {props.results.map((result, i) => (\n                <div key={i}>\n                  <h6>{props.choices[i]}</h6>\n                  <div className='poll-result'>\n                    <div className='result-bar mb-3'\n                      style={{\n                        ...defaultStyle,\n                        ...transitionStyles(Math.round((result/props.totalVotes) * 100))[state]\n                      }}\n                    >\n                      <div>\n                        {result !== 0 ?\n                          `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                          : '0 votes • 0.00%' }\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n            )}\n        </Transition>\n                        */}\n      </div>\n    }\n  </div>\n);\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n}\n\nexport default withRouter(PollResults);\n\n/*\nconst PollResults = props => (\n    <div className='poll-results'>\n      <h5><FontAwesomeIcon icon={faChartBar}/> Results</h5>\n      { props.resultsLoading ?\n        <div className='justify-content-center align-items-center' style={{height: '200px', display: 'flex'}}>\n          <Spinner animation=\"grow\" variant=\"light\" />\n        </div>\n        :\n        <div>\n          <div className='poll-stat mb-3'>\n            <b>{props.totalVotes} votes</b> • <b>{props.timelimit}</b>\n          </div>\n          <div className='mb-3'>\n            <Button variant='grey-blue' size='sm' onClick={props.loadResults}>\n              { props.refreshResultsLoading ? \n                <Spinner\n                as=\"span\"\n                animation=\"grow\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n                /> : null\n              }\n               Refresh Results\n            </Button>\n          </div>\n          <div className='results-container'>\n            {props.results.map((result, i) => (\n              <div key={i}>\n                <h6>{props.choices[i]}</h6>\n                <div className='poll-result'>\n                    <div \n                      className='result-bar mb-3'\n                      style={{width: `${Math.round((result/props.totalVotes) * 100)}%`}}\n                    >\n                      <div>\n                        {result !== 0 ?\n                          `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                          :\n                          '0 votes • 0.00%'\n                        }\n                      </div>\n                    </div>\n                </div>\n              </div>\n            ))}\n          </ReactCSSTransitionGroup>\n          </div>\n        </div>\n      }\n    </div>\n  );\n\n  */"]},"metadata":{},"sourceType":"module"}