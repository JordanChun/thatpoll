{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport moment from 'moment';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { Router } from 'next/router';\nimport Error from 'next/error';\nimport NotFound from './not-found';\nimport absoluteUrl from 'next-absolute-url';\n\nclass PollPage extends React.Component {\n  static async getInitialProps({\n    query: {\n      slug\n    },\n    req\n  }) {\n    const {\n      origin\n    } = absoluteUrl(req);\n    const res = await fetch(`${origin}/api/poll/${slug}`);\n    const errorCode = res.status > 200 ? res.status : false;\n    const data = await res.json();\n    return {\n      errorCode,\n      poll: data\n    };\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return __jsx(NotFound, null);\n    }\n\n    const {\n      title,\n      desc,\n      visibility,\n      choices,\n      votingPeriod,\n      dateCreated,\n      visits\n    } = this.props.poll; //console.log(moment.duration(moment(dateCreated).add(votingPeriod, 'hours').diff(dateCreated)).asHours())\n    //console.log(moment(dateCreated).add(votingPeriod, 'hours'));\n\n    return __jsx(Layout, null, __jsx(\"div\", {\n      className: \"poll-wrapper\"\n    }, visibility == 'private' ? __jsx(\"div\", {\n      className: \"poll-alert\"\n    }, __jsx(Alert, {\n      variant: \"danger\"\n    }, \"This is a \", __jsx(\"b\", null, \"private\"), \" poll. Please consider before sharing the link.\")) : null, __jsx(\"h4\", {\n      className: \"poll-title\"\n    }, title.length > 0 ? title : 'Untitled'), __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"poll-desc\"\n    }, __jsx(\"h6\", null, \"Description\"), __jsx(\"div\", null, __jsx(\"p\", null, desc.length > 0 ? desc : __jsx(\"i\", null, \"No description\")), __jsx(\"hr\", null), __jsx(\"div\", {\n      className: \"poll-stat\"\n    }, visits, \" views \\u2022 \", moment(dateCreated).format('ll')))), __jsx(\"hr\", null), moment(dateCreated).add(votingPeriod, 'hours').isAfter(_Date$now()) ? __jsx(PollChoices, {\n      choices: choices,\n      dateCreated: dateCreated,\n      votingPeriod: votingPeriod\n    }) : __jsx(PollResults, null)));\n  }\n\n}\n/*\nconst PollPage = (props) => {\n  const router = useRouter()\n  const { slug } = router.query;\n  console.log(props);\n  return (\n    <Layout>\n      <Poll {...props} />\n    </Layout>\n  )\n}\n*?\n\n/*\nconst Poll = props => (\n  <Layout>\n    \n    <h3>{props.title}</h3>\n  </Layout>\n);\n*/\n\n/*\nPollPage.getInitialProps = async function(context) {\n  const { slug } = context.query;\n  const res = await fetch(`http://localhost:3000/api/poll/${slug}`);\n  console.log(res);\n  const errorCode = res.status > 200 ? res.status : false\n  const data = await res.json()\n\n  return { errorCode, poll: data }\n  if(res.status === 200) {\n    const data = await res.json();\n    return { poll: data };\n  } else {\n    Router.push('')\n  }\n  console.log(data);\n}\n */\n\n\nexport default PollPage;","map":{"version":3,"sources":["E:\\Users\\Jordan\\Desktop\\statmix\\pages\\poll.js"],"names":["Layout","fetch","moment","InputGroup","Alert","PollChoices","PollResults","Router","Error","NotFound","absoluteUrl","PollPage","React","Component","getInitialProps","query","slug","req","origin","res","errorCode","status","data","json","poll","constructor","props","render","title","desc","visibility","choices","votingPeriod","dateCreated","visits","length","format","add","isAfter"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,QAAN,SAAuBC,KAAK,CAACC,SAA7B,CAAuC;AACrC,eAAaC,eAAb,CAA6B;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KAAT;AAAmBC,IAAAA;AAAnB,GAA7B,EAAuD;AACrD,UAAM;AAAEC,MAAAA;AAAF,QAAaR,WAAW,CAACO,GAAD,CAA9B;AACA,UAAME,GAAG,GAAG,MAAMlB,KAAK,CAAE,GAAEiB,MAAO,aAAYF,IAAK,EAA5B,CAAvB;AACA,UAAMI,SAAS,GAAGD,GAAG,CAACE,MAAJ,GAAa,GAAb,GAAmBF,GAAG,CAACE,MAAvB,GAAgC,KAAlD;AACA,UAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAnB;AAEA,WAAO;AAAEH,MAAAA,SAAF;AAAaI,MAAAA,IAAI,EAAEF;AAAnB,KAAP;AACD;;AAEDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,KAAKD,KAAL,CAAWN,SAAf,EAA0B;AACxB,aAAO,MAAC,QAAD,OAAP;AACD;;AAGD,UAAM;AACJQ,MAAAA,KADI;AAEJC,MAAAA,IAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,OAJI;AAKJC,MAAAA,YALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA;AAPI,QASF,KAAKR,KAAL,CAAWF,IATf,CAPO,CAiBP;AACA;;AACA,WACE,MAAC,MAAD,QACE;AAAK,MAAA,SAAS,EAAC;AAAf,OACGM,UAAU,IAAI,SAAd,GACC;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,MAAC,KAAD;AAAO,MAAA,OAAO,EAAC;AAAf,qBACY,2BADZ,oDADF,CADD,GAMC,IAPJ,EAQE;AAAI,MAAA,SAAS,EAAC;AAAd,OAA4BF,KAAK,CAACO,MAAN,GAAe,CAAf,GAAmBP,KAAnB,GAA2B,UAAvD,CARF,EASE,iBATF,EAUE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE,gCADF,EAEE,mBACE,iBACGC,IAAI,CAACM,MAAL,GAAc,CAAd,GAAkBN,IAAlB,GAAyB,kCAD5B,CADF,EAIE,iBAJF,EAKE;AAAK,MAAA,SAAS,EAAC;AAAf,OACGK,MADH,oBACoBhC,MAAM,CAAC+B,WAAD,CAAN,CAAoBG,MAApB,CAA2B,IAA3B,CADpB,CALF,CAFF,CAVF,EAsBE,iBAtBF,EAwBIlC,MAAM,CAAC+B,WAAD,CAAN,CAAoBI,GAApB,CAAwBL,YAAxB,EAAsC,OAAtC,EAA+CM,OAA/C,CAAuD,WAAvD,IACA,MAAC,WAAD;AAAa,MAAA,OAAO,EAAEP,OAAtB;AAA+B,MAAA,WAAW,EAAEE,WAA5C;AAAyD,MAAA,YAAY,EAAED;AAAvE,MADA,GAGA,MAAC,WAAD,OA3BJ,CADF,CADF;AAkCD;;AAnEoC;AAsEvC;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;AAkBA,eAAerB,QAAf","sourcesContent":["import Layout from '../components/Layout';\nimport fetch from 'isomorphic-unfetch';\nimport moment from 'moment';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Alert from 'react-bootstrap/Alert';\nimport PollChoices from '../components/PollChoices';\nimport PollResults from '../components/PollResults';\nimport { Router } from 'next/router';\nimport Error from 'next/error';\nimport NotFound from './not-found';\nimport absoluteUrl from 'next-absolute-url';\n\nclass PollPage extends React.Component {\n  static async getInitialProps({ query: { slug }, req }) {\n    const { origin } = absoluteUrl(req);\n    const res = await fetch(`${origin}/api/poll/${slug}`);\n    const errorCode = res.status > 200 ? res.status : false\n    const data = await res.json()\n  \n    return { errorCode, poll: data }\n  }\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    // if not data found for poll\n    if (this.props.errorCode) {\n      return <NotFound />\n    }\n\n    \n    const {\n      title,\n      desc,\n      visibility,\n      choices,\n      votingPeriod,\n      dateCreated,\n      visits,\n\n    } = this.props.poll;\n    //console.log(moment.duration(moment(dateCreated).add(votingPeriod, 'hours').diff(dateCreated)).asHours())\n    //console.log(moment(dateCreated).add(votingPeriod, 'hours'));\n    return (\n      <Layout>\n        <div className='poll-wrapper'>\n          {visibility == 'private' ?\n            <div className='poll-alert'>\n              <Alert variant='danger'>\n                This is a <b>private</b> poll. Please consider before sharing the link.\n              </Alert>\n            </div>\n          : null }\n          <h4 className='poll-title'>{title.length > 0 ? title : 'Untitled'}</h4>\n          <hr />\n          <div className='poll-desc'>\n            <h6>Description</h6>\n            <div>\n              <p>\n                {desc.length > 0 ? desc : <i>No description</i>}\n              </p>\n              <hr />\n              <div className='poll-stat'>\n                {visits} views â€¢ {moment(dateCreated).format('ll')}\n              </div>\n            </div>\n          </div>\n          <hr />\n          {\n            moment(dateCreated).add(votingPeriod, 'hours').isAfter(Date.now()) ?\n            <PollChoices choices={choices} dateCreated={dateCreated} votingPeriod={votingPeriod} />\n            :\n            <PollResults />\n          }\n        </div>\n      </Layout>\n    )\n  }\n}\n\n/*\nconst PollPage = (props) => {\n  const router = useRouter()\n  const { slug } = router.query;\n  console.log(props);\n  return (\n    <Layout>\n      <Poll {...props} />\n    </Layout>\n  )\n}\n*?\n\n/*\nconst Poll = props => (\n  <Layout>\n    \n    <h3>{props.title}</h3>\n  </Layout>\n);\n*/\n\n/*\nPollPage.getInitialProps = async function(context) {\n  const { slug } = context.query;\n  const res = await fetch(`http://localhost:3000/api/poll/${slug}`);\n  console.log(res);\n  const errorCode = res.status > 200 ? res.status : false\n  const data = await res.json()\n\n  return { errorCode, poll: data }\n  if(res.status === 200) {\n    const data = await res.json();\n    return { poll: data };\n  } else {\n    Router.push('')\n  }\n  console.log(data);\n}\n */\nexport default PollPage"]},"metadata":{},"sourceType":"module"}