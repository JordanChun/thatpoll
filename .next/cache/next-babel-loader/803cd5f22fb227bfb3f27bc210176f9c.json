{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPollH } from '@fortawesome/free-solid-svg-icons';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport PropTypes from 'prop-types';\n\nconst PollChoices = props => __jsx(\"div\", {\n  className: \"poll-choices\"\n}, props.userDidVoteError ? __jsx(\"div\", {\n  className: \"poll-alert\"\n}, __jsx(Alert, {\n  variant: \"warning\"\n}, \"You have already voted.\")) : null, __jsx(\"h5\", null, __jsx(FontAwesomeIcon, {\n  icon: faPollH\n}), \" Choices\"), __jsx(\"div\", {\n  className: \"poll-stat mb-3\"\n}, __jsx(\"b\", null, props.timelimit)), props.choices.map((choice, i) => __jsx(InputGroup, {\n  className: \"mb-3\",\n  key: i\n}, __jsx(\"input\", {\n  className: \"choice-control\",\n  type: \"radio\",\n  name: \"poll-choice\",\n  value: i,\n  onChange: props.updateChoiceSelected\n}), __jsx(\"label\", {\n  className: \"form-control\"\n}, choice))), __jsx(\"div\", {\n  className: \"mb-3\"\n}, __jsx(Button, {\n  size: \"sm\",\n  onClick: props.submitVote,\n  variant: \"light-blue\",\n  type: \"submit\",\n  style: {\n    width: '200px'\n  }\n}, \"Submit Vote\")), !props.revealResults ? __jsx(\"div\", {\n  className: \"mb-3\"\n}, __jsx(Button, {\n  variant: \"grey-blue\",\n  size: \"sm\",\n  onClick: props.loadResults\n}, \"View Results\")) : null);\n\nPollChoices.propTypes = {\n  userDidVote: PropTypes.bool.isRequired,\n  userDidVoteError: PropTypes.bool.isRequired,\n  timelimit: PropTypes.string.isRequired,\n  choices: PropTypes.array.isRequired,\n  revealResults: PropTypes.bool.isRequired,\n  updateChoiceSelected: PropTypes.func.isRequired,\n  submitVote: PropTypes.func.isRequired,\n  loadResults: PropTypes.func.isRequired\n};\nexport default PollChoices;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/components/PollChoices.js"],"names":["FontAwesomeIcon","faPollH","InputGroup","Button","Alert","PropTypes","PollChoices","props","userDidVoteError","timelimit","choices","map","choice","i","updateChoiceSelected","submitVote","width","revealResults","loadResults","propTypes","userDidVote","bool","isRequired","string","array","func"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IACvB;AAAK,EAAA,SAAS,EAAC;AAAf,GACGA,KAAK,CAACC,gBAAN,GACC;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,MAAC,KAAD;AAAO,EAAA,OAAO,EAAC;AAAf,6BADF,CADD,GAMC,IAPJ,EAQE,kBAAI,MAAC,eAAD;AAAiB,EAAA,IAAI,EAAEP;AAAvB,EAAJ,aARF,EASE;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,iBAAIM,KAAK,CAACE,SAAV,CADF,CATF,EAYGF,KAAK,CAACG,OAAN,CAAcC,GAAd,CAAkB,CAACC,MAAD,EAASC,CAAT,KACjB,MAAC,UAAD;AAAY,EAAA,SAAS,EAAC,MAAtB;AAA6B,EAAA,GAAG,EAAEA;AAAlC,GACE;AAAO,EAAA,SAAS,EAAC,gBAAjB;AAAkC,EAAA,IAAI,EAAC,OAAvC;AAA+C,EAAA,IAAI,EAAC,aAApD;AAAkE,EAAA,KAAK,EAAEA,CAAzE;AAA4E,EAAA,QAAQ,EAAEN,KAAK,CAACO;AAA5F,EADF,EAEE;AAAO,EAAA,SAAS,EAAC;AAAjB,GAAiCF,MAAjC,CAFF,CADD,CAZH,EAkBE;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,MAAC,MAAD;AACE,EAAA,IAAI,EAAC,IADP;AAEE,EAAA,OAAO,EAAEL,KAAK,CAACQ,UAFjB;AAGE,EAAA,OAAO,EAAC,YAHV;AAGuB,EAAA,IAAI,EAAC,QAH5B;AAGqC,EAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT;AAH5C,iBADF,CAlBF,EA2BI,CAACT,KAAK,CAACU,aAAP,GACA;AAAK,EAAA,SAAS,EAAC;AAAf,GACE,MAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,IAAI,EAAC,IAAjC;AAAsC,EAAA,OAAO,EAAEV,KAAK,CAACW;AAArD,kBADF,CADA,GAIE,IA/BN,CADF;;AAoCAZ,WAAW,CAACa,SAAZ,GAAwB;AACtBC,EAAAA,WAAW,EAAEf,SAAS,CAACgB,IAAV,CAAeC,UADN;AAEtBd,EAAAA,gBAAgB,EAAEH,SAAS,CAACgB,IAAV,CAAeC,UAFX;AAGtBb,EAAAA,SAAS,EAAEJ,SAAS,CAACkB,MAAV,CAAiBD,UAHN;AAItBZ,EAAAA,OAAO,EAAEL,SAAS,CAACmB,KAAV,CAAgBF,UAJH;AAKtBL,EAAAA,aAAa,EAAEZ,SAAS,CAACgB,IAAV,CAAeC,UALR;AAMtBR,EAAAA,oBAAoB,EAAET,SAAS,CAACoB,IAAV,CAAeH,UANf;AAOtBP,EAAAA,UAAU,EAAEV,SAAS,CAACoB,IAAV,CAAeH,UAPL;AAQtBJ,EAAAA,WAAW,EAAEb,SAAS,CAACoB,IAAV,CAAeH;AARN,CAAxB;AAWA,eAAehB,WAAf","sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPollH } from '@fortawesome/free-solid-svg-icons';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport PropTypes from 'prop-types';\n\nconst PollChoices = props => (\n  <div className='poll-choices'>\n    {props.userDidVoteError ?\n      <div className='poll-alert'>\n        <Alert variant='warning'>\n          You have already voted.\n        </Alert>\n      </div>\n    : null }\n    <h5><FontAwesomeIcon icon={faPollH} /> Choices</h5>\n    <div className='poll-stat mb-3'>\n      <b>{props.timelimit}</b>\n    </div>\n    {props.choices.map((choice, i) => (\n      <InputGroup className=\"mb-3\" key={i}>\n        <input className='choice-control' type='radio' name='poll-choice' value={i} onChange={props.updateChoiceSelected} />\n        <label className='form-control'>{choice}</label>\n      </InputGroup>\n    ))}\n    <div className='mb-3'>\n      <Button\n        size='sm'\n        onClick={props.submitVote} \n        variant='light-blue' type=\"submit\" style={{ width: '200px' }}>\n        Submit Vote\n      </Button>\n    </div>\n\n    { !props.revealResults ?\n      <div className='mb-3'>\n        <Button variant='grey-blue' size='sm' onClick={props.loadResults}>View Results</Button>\n      </div>\n      : null }\n  </div>\n);\n\nPollChoices.propTypes = {\n  userDidVote: PropTypes.bool.isRequired,\n  userDidVoteError: PropTypes.bool.isRequired,\n  timelimit: PropTypes.string.isRequired,\n  choices: PropTypes.array.isRequired,\n  revealResults: PropTypes.bool.isRequired,\n  updateChoiceSelected: PropTypes.func.isRequired,\n  submitVote: PropTypes.func.isRequired,\n  loadResults: PropTypes.func.isRequired\n}\n\nexport default PollChoices;"]},"metadata":{},"sourceType":"module"}