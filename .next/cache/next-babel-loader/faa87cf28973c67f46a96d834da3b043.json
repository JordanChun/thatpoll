{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\n\nvar PollResults = function PollResults(props) {\n  return __jsx(\"div\", {\n    className: \"poll-results\"\n  }, __jsx(\"h5\", null, __jsx(FontAwesomeIcon, {\n    icon: faChartBar\n  }), \" Results\"), props.resultsLoading ? __jsx(\"div\", {\n    className: \"justify-content-center align-items-center\",\n    style: {\n      height: '200px',\n      display: 'flex'\n    }\n  }, __jsx(Spinner, {\n    animation: \"grow\",\n    variant: \"light\"\n  })) : __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"poll-stat mb-3\"\n  }, __jsx(\"b\", null, props.totalVotes, \" votes\"), \" \\u2022 \", __jsx(\"b\", null, props.timelimit)), __jsx(\"div\", {\n    className: \"mb-3\"\n  }, __jsx(Button, {\n    variant: \"grey-blue\",\n    size: \"sm\",\n    onClick: props.loadResults\n  }, props.refreshResultsLoading ? __jsx(Spinner, {\n    as: \"span\",\n    animation: \"grow\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\"\n  }) : null, \"Refresh Results\")), __jsx(\"div\", {\n    className: \"results-container\"\n  }, props.results.map(function (result, i) {\n    return __jsx(\"div\", {\n      key: i\n    }, __jsx(\"h6\", null, props.choices[i]), __jsx(\"div\", {\n      className: \"poll-result\"\n    }, __jsx(\"div\", {\n      className: \"result-bar mb-3\",\n      style: {\n        width: \"\".concat(Math.round(result / props.totalVotes * 100), \"%\")\n      }\n    }, __jsx(\"div\", null, result !== 0 ? \"\".concat(result, \" votes \\u2022 \").concat(Math.round(result / props.totalVotes * 100).toFixed(2), \"%\") : '0 votes • 0.00%'))));\n  }))));\n};\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n};\nexport default PollResults;","map":{"version":3,"sources":["E:/Users/Jordan/Desktop/statmix/components/PollResults.js"],"names":["FontAwesomeIcon","faChartBar","Spinner","Button","PropTypes","PollResults","props","resultsLoading","height","display","totalVotes","timelimit","loadResults","refreshResultsLoading","results","map","result","i","choices","width","Math","round","toFixed","propTypes","func"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,gCAAhC;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK;AAAA,SACvB;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,kBAAI,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEL;AAAvB,IAAJ,aADF,EAEIK,KAAK,CAACC,cAAN,GACA;AAAK,IAAA,SAAS,EAAC,2CAAf;AAA2D,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE,OAAT;AAAkBC,MAAAA,OAAO,EAAE;AAA3B;AAAlE,KACE,MAAC,OAAD;AAAS,IAAA,SAAS,EAAC,MAAnB;AAA0B,IAAA,OAAO,EAAC;AAAlC,IADF,CADA,GAKA,mBACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,iBAAIH,KAAK,CAACI,UAAV,WADF,cACoC,iBAAIJ,KAAK,CAACK,SAAV,CADpC,CADF,EAIE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,IAAI,EAAC,IAAjC;AAAsC,IAAA,OAAO,EAAEL,KAAK,CAACM;AAArD,KACIN,KAAK,CAACO,qBAAN,GACA,MAAC,OAAD;AACA,IAAA,EAAE,EAAC,MADH;AAEA,IAAA,SAAS,EAAC,MAFV;AAGA,IAAA,IAAI,EAAC,IAHL;AAIA,IAAA,IAAI,EAAC,QAJL;AAKA,mBAAY;AALZ,IADA,GAOK,IART,oBADF,CAJF,EAkBE;AAAK,IAAA,SAAS,EAAC;AAAf,KACGP,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkB,UAACC,MAAD,EAASC,CAAT;AAAA,WACjB;AAAK,MAAA,GAAG,EAAEA;AAAV,OACE,kBAAKX,KAAK,CAACY,OAAN,CAAcD,CAAd,CAAL,CADF,EAEE;AAAK,MAAA,SAAS,EAAC;AAAf,OACE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,KAAK,EAAE;AAACE,QAAAA,KAAK,YAAKC,IAAI,CAACC,KAAL,CAAYL,MAAM,GAACV,KAAK,CAACI,UAAd,GAA4B,GAAvC,CAAL;AAAN;AAFT,OAIE,mBACGM,MAAM,KAAK,CAAX,aACIA,MADJ,2BACsBI,IAAI,CAACC,KAAL,CAAYL,MAAM,GAACV,KAAK,CAACI,UAAd,GAA4B,GAAvC,EAA4CY,OAA5C,CAAoD,CAApD,CADtB,SAGC,iBAJJ,CAJF,CADF,CAFF,CADiB;AAAA,GAAlB,CADH,CAlBF,CAPJ,CADuB;AAAA,CAAzB;;AAoDAjB,WAAW,CAACkB,SAAZ,GAAwB;AACtBX,EAAAA,WAAW,EAAER,SAAS,CAACoB;AADD,CAAxB;AAIA,eAAenB,WAAf","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChartBar } from \"@fortawesome/free-solid-svg-icons\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport PropTypes from 'prop-types';\n\nconst PollResults = props => (\n  <div className='poll-results'>\n    <h5><FontAwesomeIcon icon={faChartBar}/> Results</h5>\n    { props.resultsLoading ?\n      <div className='justify-content-center align-items-center' style={{height: '200px', display: 'flex'}}>\n        <Spinner animation=\"grow\" variant=\"light\" />\n      </div>\n      :\n      <div>\n        <div className='poll-stat mb-3'>\n          <b>{props.totalVotes} votes</b> • <b>{props.timelimit}</b>\n        </div>\n        <div className='mb-3'>\n          <Button variant='grey-blue' size='sm' onClick={props.loadResults}>\n            { props.refreshResultsLoading ? \n              <Spinner\n              as=\"span\"\n              animation=\"grow\"\n              size=\"sm\"\n              role=\"status\"\n              aria-hidden=\"true\"\n              /> : null\n            }\n             Refresh Results\n          </Button>\n        </div>\n        <div className='results-container'>\n          {props.results.map((result, i) => (\n            <div key={i}>\n              <h6>{props.choices[i]}</h6>\n              <div className='poll-result'>\n                <div \n                  className='result-bar mb-3'\n                  style={{width: `${Math.round((result/props.totalVotes) * 100)}%`}}\n                >\n                  <div>\n                    {result !== 0 ?\n                      `${result} votes • ${Math.round((result/props.totalVotes) * 100).toFixed(2)}%`\n                      :\n                      '0 votes • 0.00%'\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    }\n  </div>\n);\n\nPollResults.propTypes = {\n  loadResults: PropTypes.func\n}\n\nexport default PollResults;"]},"metadata":{},"sourceType":"module"}